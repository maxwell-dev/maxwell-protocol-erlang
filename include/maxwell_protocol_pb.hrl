%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.17.7

-ifndef(maxwell_protocol_pb).
-define(maxwell_protocol_pb, true).

-define(maxwell_protocol_pb_gpb_version, "4.17.7").

-ifndef('PING_REQ_T_PB_H').
-define('PING_REQ_T_PB_H', true).
-record(ping_req_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('PING_REP_T_PB_H').
-define('PING_REP_T_PB_H', true).
-record(ping_rep_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('PULL_REQ_T_PB_H').
-define('PULL_REQ_T_PB_H', true).
-record(pull_req_t,
        {topic = <<>>           :: unicode:chardata() | undefined, % = 1, optional
         offset = 0             :: integer() | undefined, % = 2, optional, 64 bits
         limit = 0              :: non_neg_integer() | undefined, % = 3, optional, 32 bits
         puller = 0             :: non_neg_integer() | undefined, % = 4, optional, 32 bits
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('PULL_REP_T_PB_H').
-define('PULL_REP_T_PB_H', true).
-record(pull_rep_t,
        {msgs = []              :: [maxwell_protocol_pb:msg_t()] | undefined, % = 1, repeated
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('PUSH_REQ_T_PB_H').
-define('PUSH_REQ_T_PB_H', true).
-record(push_req_t,
        {topic = <<>>           :: unicode:chardata() | undefined, % = 1, optional
         value = <<>>           :: iodata() | undefined, % = 2, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('PUSH_REP_T_PB_H').
-define('PUSH_REP_T_PB_H', true).
-record(push_rep_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('DO_REQ_T_PB_H').
-define('DO_REQ_T_PB_H', true).
-record(do_req_t,
        {type = <<>>            :: unicode:chardata() | undefined, % = 1, optional
         value = <<>>           :: unicode:chardata() | undefined, % = 2, optional
         source_enabled = false :: boolean() | 0 | 1 | undefined, % = 13, optional
         source = undefined     :: maxwell_protocol_pb:source_t() | undefined, % = 14, optional
         traces = []            :: [maxwell_protocol_pb:trace_t()] | undefined % = 15, repeated
        }).
-endif.

-ifndef('DO_REP_T_PB_H').
-define('DO_REP_T_PB_H', true).
-record(do_rep_t,
        {value = <<>>           :: unicode:chardata() | undefined, % = 1, optional
         traces = []            :: [maxwell_protocol_pb:trace_t()] | undefined % = 15, repeated
        }).
-endif.

-ifndef('DO2_REQ_T_PB_H').
-define('DO2_REQ_T_PB_H', true).
-record(do2_req_t,
        {type = <<>>            :: unicode:chardata() | undefined, % = 1, optional
         source_enabled = false :: boolean() | 0 | 1 | undefined, % = 13, optional
         source = undefined     :: maxwell_protocol_pb:source_t() | undefined, % = 14, optional
         traces = []            :: [maxwell_protocol_pb:trace_t()] | undefined % = 15, repeated
        }).
-endif.

-ifndef('DO2_REP_T_PB_H').
-define('DO2_REP_T_PB_H', true).
-record(do2_rep_t,
        {value = <<>>           :: iodata() | undefined, % = 1, optional
         traces = []            :: [maxwell_protocol_pb:trace_t()] | undefined % = 15, repeated
        }).
-endif.

-ifndef('AUTH_REQ_T_PB_H').
-define('AUTH_REQ_T_PB_H', true).
-record(auth_req_t,
        {token = <<>>           :: unicode:chardata() | undefined, % = 1, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('AUTH_REP_T_PB_H').
-define('AUTH_REP_T_PB_H', true).
-record(auth_rep_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('OK_REP_T_PB_H').
-define('OK_REP_T_PB_H', true).
-record(ok_rep_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('ERROR_REP_T_PB_H').
-define('ERROR_REP_T_PB_H', true).
-record(error_rep_t,
        {code = 0               :: integer() | undefined, % = 1, optional, 32 bits
         desc = <<>>            :: unicode:chardata() | undefined, % = 2, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('OK2_REP_T_PB_H').
-define('OK2_REP_T_PB_H', true).
-record(ok2_rep_t,
        {traces = []            :: [maxwell_protocol_pb:trace_t()] | undefined % = 15, repeated
        }).
-endif.

-ifndef('ERROR2_REP_T_PB_H').
-define('ERROR2_REP_T_PB_H', true).
-record(error2_rep_t,
        {code = 0               :: integer() | undefined, % = 1, optional, 32 bits
         desc = <<>>            :: unicode:chardata() | undefined, % = 2, optional
         traces = []            :: [maxwell_protocol_pb:trace_t()] | undefined % = 15, repeated
        }).
-endif.

-ifndef('WATCH_REQ_T_PB_H').
-define('WATCH_REQ_T_PB_H', true).
-record(watch_req_t,
        {type = <<>>            :: unicode:chardata() | undefined, % = 1, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('WATCH_REP_T_PB_H').
-define('WATCH_REP_T_PB_H', true).
-record(watch_rep_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('UNWATCH_REQ_T_PB_H').
-define('UNWATCH_REQ_T_PB_H', true).
-record(unwatch_req_t,
        {type = <<>>            :: unicode:chardata() | undefined, % = 1, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('UNWATCH_REP_T_PB_H').
-define('UNWATCH_REP_T_PB_H', true).
-record(unwatch_rep_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('REGISTER_FRONTEND_REQ_T_PB_H').
-define('REGISTER_FRONTEND_REQ_T_PB_H', true).
-record(register_frontend_req_t,
        {endpoint = <<>>        :: unicode:chardata() | undefined, % = 1, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('REGISTER_FRONTEND_REP_T_PB_H').
-define('REGISTER_FRONTEND_REP_T_PB_H', true).
-record(register_frontend_rep_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('ADD_ROUTE_REQ_T_PB_H').
-define('ADD_ROUTE_REQ_T_PB_H', true).
-record(add_route_req_t,
        {type = <<>>            :: unicode:chardata() | undefined, % = 1, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('ADD_ROUTE_REP_T_PB_H').
-define('ADD_ROUTE_REP_T_PB_H', true).
-record(add_route_rep_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('DELETE_ROUTE_REQ_T_PB_H').
-define('DELETE_ROUTE_REQ_T_PB_H', true).
-record(delete_route_req_t,
        {type = <<>>            :: unicode:chardata() | undefined, % = 1, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('DELETE_ROUTE_REP_T_PB_H').
-define('DELETE_ROUTE_REP_T_PB_H', true).
-record(delete_route_rep_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('ADD_ROUTE_MSG_T_PB_H').
-define('ADD_ROUTE_MSG_T_PB_H', true).
-record(add_route_msg_t,
        {endpoint = <<>>        :: unicode:chardata() | undefined, % = 1, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('DELETE_ROUTE_MSG_T_PB_H').
-define('DELETE_ROUTE_MSG_T_PB_H', true).
-record(delete_route_msg_t,
        {type = <<>>            :: unicode:chardata() | undefined, % = 1, optional
         endpoint = <<>>        :: unicode:chardata() | undefined, % = 2, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('PUSH_ROUTES_REQ_T_PB_H').
-define('PUSH_ROUTES_REQ_T_PB_H', true).
-record(push_routes_req_t,
        {types = []             :: [unicode:chardata()] | undefined, % = 1, repeated
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('PUSH_ROUTES_REP_T_PB_H').
-define('PUSH_ROUTES_REP_T_PB_H', true).
-record(push_routes_rep_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('PULL_ROUTES_REQ_T_PB_H').
-define('PULL_ROUTES_REQ_T_PB_H', true).
-record(pull_routes_req_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('PULL_ROUTES_REP_T_PB_H').
-define('PULL_ROUTES_REP_T_PB_H', true).
-record(pull_routes_rep_t,
        {route_groups = []      :: [maxwell_protocol_pb:route_group_t()] | undefined, % = 1, repeated
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('DELETE_TOPICS_REQ_T_PB_H').
-define('DELETE_TOPICS_REQ_T_PB_H', true).
-record(delete_topics_req_t,
        {topics = []            :: [unicode:chardata()] | undefined, % = 1, repeated
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('DELETE_TOPICS_REP_T_PB_H').
-define('DELETE_TOPICS_REP_T_PB_H', true).
-record(delete_topics_rep_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('REGISTER_BACKEND_REQ_T_PB_H').
-define('REGISTER_BACKEND_REQ_T_PB_H', true).
-record(register_backend_req_t,
        {endpoint = <<>>        :: unicode:chardata() | undefined, % = 1, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('REGISTER_BACKEND_REP_T_PB_H').
-define('REGISTER_BACKEND_REP_T_PB_H', true).
-record(register_backend_rep_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('RESOLVE_FRONTEND_REQ_T_PB_H').
-define('RESOLVE_FRONTEND_REQ_T_PB_H', true).
-record(resolve_frontend_req_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('RESOLVE_FRONTEND_REP_T_PB_H').
-define('RESOLVE_FRONTEND_REP_T_PB_H', true).
-record(resolve_frontend_rep_t,
        {endpoint = <<>>        :: unicode:chardata() | undefined, % = 1, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('RESOLVE_BACKEND_REQ_T_PB_H').
-define('RESOLVE_BACKEND_REQ_T_PB_H', true).
-record(resolve_backend_req_t,
        {topic = <<>>           :: unicode:chardata() | undefined, % = 1, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('RESOLVE_BACKEND_REP_T_PB_H').
-define('RESOLVE_BACKEND_REP_T_PB_H', true).
-record(resolve_backend_rep_t,
        {endpoint = <<>>        :: unicode:chardata() | undefined, % = 1, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('RESOLVE_IP_REQ_T_PB_H').
-define('RESOLVE_IP_REQ_T_PB_H', true).
-record(resolve_ip_req_t,
        {ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('RESOLVE_IP_REP_T_PB_H').
-define('RESOLVE_IP_REP_T_PB_H', true).
-record(resolve_ip_rep_t,
        {ip = <<>>              :: unicode:chardata() | undefined, % = 1, optional
         ref = 0                :: non_neg_integer() | undefined % = 15, optional, 32 bits
        }).
-endif.

-ifndef('MSG_T_PB_H').
-define('MSG_T_PB_H', true).
-record(msg_t,
        {offset = 0             :: non_neg_integer() | undefined, % = 1, optional, 64 bits
         value = <<>>           :: iodata() | undefined, % = 2, optional
         timestamp = 0          :: non_neg_integer() | undefined % = 3, optional, 64 bits
        }).
-endif.

-ifndef('SOURCE_T_PB_H').
-define('SOURCE_T_PB_H', true).
-record(source_t,
        {agent = <<>>           :: unicode:chardata() | undefined, % = 1, optional
         endpoint = <<>>        :: unicode:chardata() | undefined % = 2, optional
        }).
-endif.

-ifndef('TRACE_T_PB_H').
-define('TRACE_T_PB_H', true).
-record(trace_t,
        {ref = 0                :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         handler_id = 0         :: non_neg_integer() | undefined, % = 2, optional, 32 bits
         node_id = <<>>         :: iodata() | undefined % = 3, optional
        }).
-endif.

-ifndef('ROUTE_GROUP_T_PB_H').
-define('ROUTE_GROUP_T_PB_H', true).
-record(route_group_t,
        {type = <<>>            :: unicode:chardata() | undefined, % = 1, optional
         endpoints = []         :: [unicode:chardata()] | undefined % = 2, repeated
        }).
-endif.

-endif.
