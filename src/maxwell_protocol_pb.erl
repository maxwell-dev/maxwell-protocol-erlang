%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.17.7
%% Version source: file
-module(maxwell_protocol_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_msg_type_t/1, enum_value_by_symbol_msg_type_t/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("maxwell_protocol_pb.hrl").
-include_lib("gpb/include/gpb.hrl").

%% enumerated types
-type msg_type_t() :: 'UNKNOWN' | 'PING_REQ' | 'PING_REP' | 'PULL_REQ' | 'PULL_REP' | 'PUSH_REQ' | 'PUSH_REP' | 'DO_REQ' | 'DO_REP' | 'DO2_REQ' | 'DO2_REP' | 'AUTH_REQ' | 'AUTH_REP' | 'OK_REP' | 'ERROR_REP' | 'OK2_REP' | 'ERROR2_REP' | 'REGISTER_FRONTEND_REQ' | 'REGISTER_FRONTEND_REP' | 'ADD_ROUTE_REQ' | 'ADD_ROUTE_REP' | 'DELETE_ROUTE_REQ' | 'DELETE_ROUTE_REP' | 'ADD_ROUTE_MSG' | 'DELETE_ROUTE_MSG' | 'PUSH_ROUTES_REQ' | 'PUSH_ROUTES_REP' | 'PULL_ROUTES_REQ' | 'PULL_ROUTES_REP' | 'REGISTER_BACKEND_REQ' | 'REGISTER_BACKEND_REP' | 'DELETE_TOPICS_REQ' | 'DELETE_TOPICS_REP' | 'RESOLVE_FRONTEND_REQ' | 'RESOLVE_FRONTEND_REP' | 'RESOLVE_BACKEND_REQ' | 'RESOLVE_BACKEND_REP' | 'WATCH_REQ' | 'WATCH_REP' | 'UNWATCH_REQ' | 'UNWATCH_REP' | 'RESOLVE_IP_REQ' | 'RESOLVE_IP_REP'.
-export_type([msg_type_t/0]).

%% message types
-type ping_req_t() :: #ping_req_t{}.

-type ping_rep_t() :: #ping_rep_t{}.

-type pull_req_t() :: #pull_req_t{}.

-type pull_rep_t() :: #pull_rep_t{}.

-type push_req_t() :: #push_req_t{}.

-type push_rep_t() :: #push_rep_t{}.

-type do_req_t() :: #do_req_t{}.

-type do_rep_t() :: #do_rep_t{}.

-type do2_req_t() :: #do2_req_t{}.

-type do2_rep_t() :: #do2_rep_t{}.

-type auth_req_t() :: #auth_req_t{}.

-type auth_rep_t() :: #auth_rep_t{}.

-type ok_rep_t() :: #ok_rep_t{}.

-type error_rep_t() :: #error_rep_t{}.

-type ok2_rep_t() :: #ok2_rep_t{}.

-type error2_rep_t() :: #error2_rep_t{}.

-type watch_req_t() :: #watch_req_t{}.

-type watch_rep_t() :: #watch_rep_t{}.

-type unwatch_req_t() :: #unwatch_req_t{}.

-type unwatch_rep_t() :: #unwatch_rep_t{}.

-type register_frontend_req_t() :: #register_frontend_req_t{}.

-type register_frontend_rep_t() :: #register_frontend_rep_t{}.

-type add_route_req_t() :: #add_route_req_t{}.

-type add_route_rep_t() :: #add_route_rep_t{}.

-type delete_route_req_t() :: #delete_route_req_t{}.

-type delete_route_rep_t() :: #delete_route_rep_t{}.

-type add_route_msg_t() :: #add_route_msg_t{}.

-type delete_route_msg_t() :: #delete_route_msg_t{}.

-type push_routes_req_t() :: #push_routes_req_t{}.

-type push_routes_rep_t() :: #push_routes_rep_t{}.

-type pull_routes_req_t() :: #pull_routes_req_t{}.

-type pull_routes_rep_t() :: #pull_routes_rep_t{}.

-type delete_topics_req_t() :: #delete_topics_req_t{}.

-type delete_topics_rep_t() :: #delete_topics_rep_t{}.

-type register_backend_req_t() :: #register_backend_req_t{}.

-type register_backend_rep_t() :: #register_backend_rep_t{}.

-type resolve_frontend_req_t() :: #resolve_frontend_req_t{}.

-type resolve_frontend_rep_t() :: #resolve_frontend_rep_t{}.

-type resolve_backend_req_t() :: #resolve_backend_req_t{}.

-type resolve_backend_rep_t() :: #resolve_backend_rep_t{}.

-type resolve_ip_req_t() :: #resolve_ip_req_t{}.

-type resolve_ip_rep_t() :: #resolve_ip_rep_t{}.

-type msg_t() :: #msg_t{}.

-type source_t() :: #source_t{}.

-type trace_t() :: #trace_t{}.

-type route_group_t() :: #route_group_t{}.

-export_type(['ping_req_t'/0, 'ping_rep_t'/0, 'pull_req_t'/0, 'pull_rep_t'/0, 'push_req_t'/0, 'push_rep_t'/0, 'do_req_t'/0, 'do_rep_t'/0, 'do2_req_t'/0, 'do2_rep_t'/0, 'auth_req_t'/0, 'auth_rep_t'/0, 'ok_rep_t'/0, 'error_rep_t'/0, 'ok2_rep_t'/0, 'error2_rep_t'/0, 'watch_req_t'/0, 'watch_rep_t'/0, 'unwatch_req_t'/0, 'unwatch_rep_t'/0, 'register_frontend_req_t'/0, 'register_frontend_rep_t'/0, 'add_route_req_t'/0, 'add_route_rep_t'/0, 'delete_route_req_t'/0, 'delete_route_rep_t'/0, 'add_route_msg_t'/0, 'delete_route_msg_t'/0, 'push_routes_req_t'/0, 'push_routes_rep_t'/0, 'pull_routes_req_t'/0, 'pull_routes_rep_t'/0, 'delete_topics_req_t'/0, 'delete_topics_rep_t'/0, 'register_backend_req_t'/0, 'register_backend_rep_t'/0, 'resolve_frontend_req_t'/0, 'resolve_frontend_rep_t'/0, 'resolve_backend_req_t'/0, 'resolve_backend_rep_t'/0, 'resolve_ip_req_t'/0, 'resolve_ip_rep_t'/0, 'msg_t'/0, 'source_t'/0, 'trace_t'/0, 'route_group_t'/0]).
-type '$msg_name'() :: ping_req_t | ping_rep_t | pull_req_t | pull_rep_t | push_req_t | push_rep_t | do_req_t | do_rep_t | do2_req_t | do2_rep_t | auth_req_t | auth_rep_t | ok_rep_t | error_rep_t | ok2_rep_t | error2_rep_t | watch_req_t | watch_rep_t | unwatch_req_t | unwatch_rep_t | register_frontend_req_t | register_frontend_rep_t | add_route_req_t | add_route_rep_t | delete_route_req_t | delete_route_rep_t | add_route_msg_t | delete_route_msg_t | push_routes_req_t | push_routes_rep_t | pull_routes_req_t | pull_routes_rep_t | delete_topics_req_t | delete_topics_rep_t | register_backend_req_t | register_backend_rep_t | resolve_frontend_req_t | resolve_frontend_rep_t | resolve_backend_req_t | resolve_backend_rep_t | resolve_ip_req_t | resolve_ip_rep_t | msg_t | source_t | trace_t | route_group_t.
-type '$msg'() :: ping_req_t() | ping_rep_t() | pull_req_t() | pull_rep_t() | push_req_t() | push_rep_t() | do_req_t() | do_rep_t() | do2_req_t() | do2_rep_t() | auth_req_t() | auth_rep_t() | ok_rep_t() | error_rep_t() | ok2_rep_t() | error2_rep_t() | watch_req_t() | watch_rep_t() | unwatch_req_t() | unwatch_rep_t() | register_frontend_req_t() | register_frontend_rep_t() | add_route_req_t() | add_route_rep_t() | delete_route_req_t() | delete_route_rep_t() | add_route_msg_t() | delete_route_msg_t() | push_routes_req_t() | push_routes_rep_t() | pull_routes_req_t() | pull_routes_rep_t() | delete_topics_req_t() | delete_topics_rep_t() | register_backend_req_t() | register_backend_rep_t() | resolve_frontend_req_t() | resolve_frontend_rep_t() | resolve_backend_req_t() | resolve_backend_rep_t() | resolve_ip_req_t() | resolve_ip_rep_t() | msg_t() | source_t() | trace_t() | route_group_t().
-export_type(['$msg_name'/0, '$msg'/0]).

-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        ping_req_t -> encode_msg_ping_req_t(id(Msg, TrUserData), TrUserData);
        ping_rep_t -> encode_msg_ping_rep_t(id(Msg, TrUserData), TrUserData);
        pull_req_t -> encode_msg_pull_req_t(id(Msg, TrUserData), TrUserData);
        pull_rep_t -> encode_msg_pull_rep_t(id(Msg, TrUserData), TrUserData);
        push_req_t -> encode_msg_push_req_t(id(Msg, TrUserData), TrUserData);
        push_rep_t -> encode_msg_push_rep_t(id(Msg, TrUserData), TrUserData);
        do_req_t -> encode_msg_do_req_t(id(Msg, TrUserData), TrUserData);
        do_rep_t -> encode_msg_do_rep_t(id(Msg, TrUserData), TrUserData);
        do2_req_t -> encode_msg_do2_req_t(id(Msg, TrUserData), TrUserData);
        do2_rep_t -> encode_msg_do2_rep_t(id(Msg, TrUserData), TrUserData);
        auth_req_t -> encode_msg_auth_req_t(id(Msg, TrUserData), TrUserData);
        auth_rep_t -> encode_msg_auth_rep_t(id(Msg, TrUserData), TrUserData);
        ok_rep_t -> encode_msg_ok_rep_t(id(Msg, TrUserData), TrUserData);
        error_rep_t -> encode_msg_error_rep_t(id(Msg, TrUserData), TrUserData);
        ok2_rep_t -> encode_msg_ok2_rep_t(id(Msg, TrUserData), TrUserData);
        error2_rep_t -> encode_msg_error2_rep_t(id(Msg, TrUserData), TrUserData);
        watch_req_t -> encode_msg_watch_req_t(id(Msg, TrUserData), TrUserData);
        watch_rep_t -> encode_msg_watch_rep_t(id(Msg, TrUserData), TrUserData);
        unwatch_req_t -> encode_msg_unwatch_req_t(id(Msg, TrUserData), TrUserData);
        unwatch_rep_t -> encode_msg_unwatch_rep_t(id(Msg, TrUserData), TrUserData);
        register_frontend_req_t -> encode_msg_register_frontend_req_t(id(Msg, TrUserData), TrUserData);
        register_frontend_rep_t -> encode_msg_register_frontend_rep_t(id(Msg, TrUserData), TrUserData);
        add_route_req_t -> encode_msg_add_route_req_t(id(Msg, TrUserData), TrUserData);
        add_route_rep_t -> encode_msg_add_route_rep_t(id(Msg, TrUserData), TrUserData);
        delete_route_req_t -> encode_msg_delete_route_req_t(id(Msg, TrUserData), TrUserData);
        delete_route_rep_t -> encode_msg_delete_route_rep_t(id(Msg, TrUserData), TrUserData);
        add_route_msg_t -> encode_msg_add_route_msg_t(id(Msg, TrUserData), TrUserData);
        delete_route_msg_t -> encode_msg_delete_route_msg_t(id(Msg, TrUserData), TrUserData);
        push_routes_req_t -> encode_msg_push_routes_req_t(id(Msg, TrUserData), TrUserData);
        push_routes_rep_t -> encode_msg_push_routes_rep_t(id(Msg, TrUserData), TrUserData);
        pull_routes_req_t -> encode_msg_pull_routes_req_t(id(Msg, TrUserData), TrUserData);
        pull_routes_rep_t -> encode_msg_pull_routes_rep_t(id(Msg, TrUserData), TrUserData);
        delete_topics_req_t -> encode_msg_delete_topics_req_t(id(Msg, TrUserData), TrUserData);
        delete_topics_rep_t -> encode_msg_delete_topics_rep_t(id(Msg, TrUserData), TrUserData);
        register_backend_req_t -> encode_msg_register_backend_req_t(id(Msg, TrUserData), TrUserData);
        register_backend_rep_t -> encode_msg_register_backend_rep_t(id(Msg, TrUserData), TrUserData);
        resolve_frontend_req_t -> encode_msg_resolve_frontend_req_t(id(Msg, TrUserData), TrUserData);
        resolve_frontend_rep_t -> encode_msg_resolve_frontend_rep_t(id(Msg, TrUserData), TrUserData);
        resolve_backend_req_t -> encode_msg_resolve_backend_req_t(id(Msg, TrUserData), TrUserData);
        resolve_backend_rep_t -> encode_msg_resolve_backend_rep_t(id(Msg, TrUserData), TrUserData);
        resolve_ip_req_t -> encode_msg_resolve_ip_req_t(id(Msg, TrUserData), TrUserData);
        resolve_ip_rep_t -> encode_msg_resolve_ip_rep_t(id(Msg, TrUserData), TrUserData);
        msg_t -> encode_msg_msg_t(id(Msg, TrUserData), TrUserData);
        source_t -> encode_msg_source_t(id(Msg, TrUserData), TrUserData);
        trace_t -> encode_msg_trace_t(id(Msg, TrUserData), TrUserData);
        route_group_t -> encode_msg_route_group_t(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_ping_req_t(Msg, TrUserData) -> encode_msg_ping_req_t(Msg, <<>>, TrUserData).


encode_msg_ping_req_t(#ping_req_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_ping_rep_t(Msg, TrUserData) -> encode_msg_ping_rep_t(Msg, <<>>, TrUserData).


encode_msg_ping_rep_t(#ping_rep_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_pull_req_t(Msg, TrUserData) -> encode_msg_pull_req_t(Msg, <<>>, TrUserData).


encode_msg_pull_req_t(#pull_req_t{topic = F1, offset = F2, limit = F3, puller = F4, ref = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 0 -> B2;
                       true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= 0 -> B3;
                       true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
         end,
    if F5 == undefined -> B4;
       true ->
           begin
               TrF5 = id(F5, TrUserData),
               if TrF5 =:= 0 -> B4;
                  true -> e_varint(TrF5, <<B4/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_pull_rep_t(Msg, TrUserData) -> encode_msg_pull_rep_t(Msg, <<>>, TrUserData).


encode_msg_pull_rep_t(#pull_rep_t{msgs = F1, ref = F2}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_pull_rep_t_msgs(TrF1, Bin, TrUserData)
             end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_push_req_t(Msg, TrUserData) -> encode_msg_push_req_t(Msg, <<>>, TrUserData).


encode_msg_push_req_t(#push_req_t{topic = F1, value = F2, ref = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= 0 -> B2;
                  true -> e_varint(TrF3, <<B2/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_push_rep_t(Msg, TrUserData) -> encode_msg_push_rep_t(Msg, <<>>, TrUserData).


encode_msg_push_rep_t(#push_rep_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_do_req_t(Msg, TrUserData) -> encode_msg_do_req_t(Msg, <<>>, TrUserData).


encode_msg_do_req_t(#do_req_t{type = F1, value = F2, source_enabled = F3, source = F4, traces = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= false -> B2;
                       true -> e_type_bool(TrF3, <<B2/binary, 104>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= undefined -> B3;
                       true -> e_mfield_do_req_t_source(TrF4, <<B3/binary, 114>>, TrUserData)
                    end
                end
         end,
    begin
        TrF5 = id(F5, TrUserData),
        if TrF5 == [] -> B4;
           true -> e_field_do_req_t_traces(TrF5, B4, TrUserData)
        end
    end.

encode_msg_do_rep_t(Msg, TrUserData) -> encode_msg_do_rep_t(Msg, <<>>, TrUserData).


encode_msg_do_rep_t(#do_rep_t{value = F1, traces = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_do_rep_t_traces(TrF2, B1, TrUserData)
        end
    end.

encode_msg_do2_req_t(Msg, TrUserData) -> encode_msg_do2_req_t(Msg, <<>>, TrUserData).


encode_msg_do2_req_t(#do2_req_t{type = F1, source_enabled = F2, source = F3, traces = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= false -> B1;
                       true -> e_type_bool(TrF2, <<B1/binary, 104>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= undefined -> B2;
                       true -> e_mfield_do2_req_t_source(TrF3, <<B2/binary, 114>>, TrUserData)
                    end
                end
         end,
    begin
        TrF4 = id(F4, TrUserData),
        if TrF4 == [] -> B3;
           true -> e_field_do2_req_t_traces(TrF4, B3, TrUserData)
        end
    end.

encode_msg_do2_rep_t(Msg, TrUserData) -> encode_msg_do2_rep_t(Msg, <<>>, TrUserData).


encode_msg_do2_rep_t(#do2_rep_t{value = F1, traces = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_do2_rep_t_traces(TrF2, B1, TrUserData)
        end
    end.

encode_msg_auth_req_t(Msg, TrUserData) -> encode_msg_auth_req_t(Msg, <<>>, TrUserData).


encode_msg_auth_req_t(#auth_req_t{token = F1, ref = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_auth_rep_t(Msg, TrUserData) -> encode_msg_auth_rep_t(Msg, <<>>, TrUserData).


encode_msg_auth_rep_t(#auth_rep_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_ok_rep_t(Msg, TrUserData) -> encode_msg_ok_rep_t(Msg, <<>>, TrUserData).


encode_msg_ok_rep_t(#ok_rep_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_error_rep_t(Msg, TrUserData) -> encode_msg_error_rep_t(Msg, <<>>, TrUserData).


encode_msg_error_rep_t(#error_rep_t{code = F1, desc = F2, ref = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= 0 -> B2;
                  true -> e_varint(TrF3, <<B2/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_ok2_rep_t(Msg, TrUserData) -> encode_msg_ok2_rep_t(Msg, <<>>, TrUserData).


encode_msg_ok2_rep_t(#ok2_rep_t{traces = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_ok2_rep_t_traces(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_error2_rep_t(Msg, TrUserData) -> encode_msg_error2_rep_t(Msg, <<>>, TrUserData).


encode_msg_error2_rep_t(#error2_rep_t{code = F1, desc = F2, traces = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    begin
        TrF3 = id(F3, TrUserData),
        if TrF3 == [] -> B2;
           true -> e_field_error2_rep_t_traces(TrF3, B2, TrUserData)
        end
    end.

encode_msg_watch_req_t(Msg, TrUserData) -> encode_msg_watch_req_t(Msg, <<>>, TrUserData).


encode_msg_watch_req_t(#watch_req_t{type = F1, ref = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_watch_rep_t(Msg, TrUserData) -> encode_msg_watch_rep_t(Msg, <<>>, TrUserData).


encode_msg_watch_rep_t(#watch_rep_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_unwatch_req_t(Msg, TrUserData) -> encode_msg_unwatch_req_t(Msg, <<>>, TrUserData).


encode_msg_unwatch_req_t(#unwatch_req_t{type = F1, ref = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_unwatch_rep_t(Msg, TrUserData) -> encode_msg_unwatch_rep_t(Msg, <<>>, TrUserData).


encode_msg_unwatch_rep_t(#unwatch_rep_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_register_frontend_req_t(Msg, TrUserData) -> encode_msg_register_frontend_req_t(Msg, <<>>, TrUserData).


encode_msg_register_frontend_req_t(#register_frontend_req_t{endpoint = F1, ref = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_register_frontend_rep_t(Msg, TrUserData) -> encode_msg_register_frontend_rep_t(Msg, <<>>, TrUserData).


encode_msg_register_frontend_rep_t(#register_frontend_rep_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_add_route_req_t(Msg, TrUserData) -> encode_msg_add_route_req_t(Msg, <<>>, TrUserData).


encode_msg_add_route_req_t(#add_route_req_t{type = F1, ref = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_add_route_rep_t(Msg, TrUserData) -> encode_msg_add_route_rep_t(Msg, <<>>, TrUserData).


encode_msg_add_route_rep_t(#add_route_rep_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_delete_route_req_t(Msg, TrUserData) -> encode_msg_delete_route_req_t(Msg, <<>>, TrUserData).


encode_msg_delete_route_req_t(#delete_route_req_t{type = F1, ref = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_delete_route_rep_t(Msg, TrUserData) -> encode_msg_delete_route_rep_t(Msg, <<>>, TrUserData).


encode_msg_delete_route_rep_t(#delete_route_rep_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_add_route_msg_t(Msg, TrUserData) -> encode_msg_add_route_msg_t(Msg, <<>>, TrUserData).


encode_msg_add_route_msg_t(#add_route_msg_t{endpoint = F1, ref = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_delete_route_msg_t(Msg, TrUserData) -> encode_msg_delete_route_msg_t(Msg, <<>>, TrUserData).


encode_msg_delete_route_msg_t(#delete_route_msg_t{type = F1, endpoint = F2, ref = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= 0 -> B2;
                  true -> e_varint(TrF3, <<B2/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_push_routes_req_t(Msg, TrUserData) -> encode_msg_push_routes_req_t(Msg, <<>>, TrUserData).


encode_msg_push_routes_req_t(#push_routes_req_t{types = F1, ref = F2}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_push_routes_req_t_types(TrF1, Bin, TrUserData)
             end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_push_routes_rep_t(Msg, TrUserData) -> encode_msg_push_routes_rep_t(Msg, <<>>, TrUserData).


encode_msg_push_routes_rep_t(#push_routes_rep_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_pull_routes_req_t(Msg, TrUserData) -> encode_msg_pull_routes_req_t(Msg, <<>>, TrUserData).


encode_msg_pull_routes_req_t(#pull_routes_req_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_pull_routes_rep_t(Msg, TrUserData) -> encode_msg_pull_routes_rep_t(Msg, <<>>, TrUserData).


encode_msg_pull_routes_rep_t(#pull_routes_rep_t{route_groups = F1, ref = F2}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_pull_routes_rep_t_route_groups(TrF1, Bin, TrUserData)
             end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_delete_topics_req_t(Msg, TrUserData) -> encode_msg_delete_topics_req_t(Msg, <<>>, TrUserData).


encode_msg_delete_topics_req_t(#delete_topics_req_t{topics = F1, ref = F2}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_delete_topics_req_t_topics(TrF1, Bin, TrUserData)
             end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_delete_topics_rep_t(Msg, TrUserData) -> encode_msg_delete_topics_rep_t(Msg, <<>>, TrUserData).


encode_msg_delete_topics_rep_t(#delete_topics_rep_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_register_backend_req_t(Msg, TrUserData) -> encode_msg_register_backend_req_t(Msg, <<>>, TrUserData).


encode_msg_register_backend_req_t(#register_backend_req_t{endpoint = F1, ref = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_register_backend_rep_t(Msg, TrUserData) -> encode_msg_register_backend_rep_t(Msg, <<>>, TrUserData).


encode_msg_register_backend_rep_t(#register_backend_rep_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_resolve_frontend_req_t(Msg, TrUserData) -> encode_msg_resolve_frontend_req_t(Msg, <<>>, TrUserData).


encode_msg_resolve_frontend_req_t(#resolve_frontend_req_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_resolve_frontend_rep_t(Msg, TrUserData) -> encode_msg_resolve_frontend_rep_t(Msg, <<>>, TrUserData).


encode_msg_resolve_frontend_rep_t(#resolve_frontend_rep_t{endpoint = F1, ref = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_resolve_backend_req_t(Msg, TrUserData) -> encode_msg_resolve_backend_req_t(Msg, <<>>, TrUserData).


encode_msg_resolve_backend_req_t(#resolve_backend_req_t{topic = F1, ref = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_resolve_backend_rep_t(Msg, TrUserData) -> encode_msg_resolve_backend_rep_t(Msg, <<>>, TrUserData).


encode_msg_resolve_backend_rep_t(#resolve_backend_rep_t{endpoint = F1, ref = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_resolve_ip_req_t(Msg, TrUserData) -> encode_msg_resolve_ip_req_t(Msg, <<>>, TrUserData).


encode_msg_resolve_ip_req_t(#resolve_ip_req_t{ref = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_resolve_ip_rep_t(Msg, TrUserData) -> encode_msg_resolve_ip_rep_t(Msg, <<>>, TrUserData).


encode_msg_resolve_ip_rep_t(#resolve_ip_rep_t{ip = F1, ref = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 120>>, TrUserData)
               end
           end
    end.

encode_msg_msg_t(Msg, TrUserData) -> encode_msg_msg_t(Msg, <<>>, TrUserData).


encode_msg_msg_t(#msg_t{offset = F1, value = F2, timestamp = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= 0 -> B2;
                  true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
               end
           end
    end.

encode_msg_source_t(Msg, TrUserData) -> encode_msg_source_t(Msg, <<>>, TrUserData).


encode_msg_source_t(#source_t{agent = F1, endpoint = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case is_empty_string(TrF2) of
                   true -> B1;
                   false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_trace_t(Msg, TrUserData) -> encode_msg_trace_t(Msg, <<>>, TrUserData).


encode_msg_trace_t(#trace_t{ref = F1, handler_id = F2, node_id = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               case iolist_size(TrF3) of
                   0 -> B2;
                   _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
               end
           end
    end.

encode_msg_route_group_t(Msg, TrUserData) -> encode_msg_route_group_t(Msg, <<>>, TrUserData).


encode_msg_route_group_t(#route_group_t{type = F1, endpoints = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_route_group_t_endpoints(TrF2, B1, TrUserData)
        end
    end.

e_mfield_pull_rep_t_msgs(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_msg_t(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_pull_rep_t_msgs([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_pull_rep_t_msgs(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_pull_rep_t_msgs(Rest, Bin3, TrUserData);
e_field_pull_rep_t_msgs([], Bin, _TrUserData) -> Bin.

e_mfield_do_req_t_source(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_source_t(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_do_req_t_traces(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_trace_t(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_do_req_t_traces([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 122>>,
    Bin3 = e_mfield_do_req_t_traces(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_do_req_t_traces(Rest, Bin3, TrUserData);
e_field_do_req_t_traces([], Bin, _TrUserData) -> Bin.

e_mfield_do_rep_t_traces(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_trace_t(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_do_rep_t_traces([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 122>>,
    Bin3 = e_mfield_do_rep_t_traces(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_do_rep_t_traces(Rest, Bin3, TrUserData);
e_field_do_rep_t_traces([], Bin, _TrUserData) -> Bin.

e_mfield_do2_req_t_source(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_source_t(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_do2_req_t_traces(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_trace_t(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_do2_req_t_traces([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 122>>,
    Bin3 = e_mfield_do2_req_t_traces(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_do2_req_t_traces(Rest, Bin3, TrUserData);
e_field_do2_req_t_traces([], Bin, _TrUserData) -> Bin.

e_mfield_do2_rep_t_traces(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_trace_t(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_do2_rep_t_traces([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 122>>,
    Bin3 = e_mfield_do2_rep_t_traces(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_do2_rep_t_traces(Rest, Bin3, TrUserData);
e_field_do2_rep_t_traces([], Bin, _TrUserData) -> Bin.

e_mfield_ok2_rep_t_traces(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_trace_t(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ok2_rep_t_traces([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 122>>,
    Bin3 = e_mfield_ok2_rep_t_traces(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_ok2_rep_t_traces(Rest, Bin3, TrUserData);
e_field_ok2_rep_t_traces([], Bin, _TrUserData) -> Bin.

e_mfield_error2_rep_t_traces(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_trace_t(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_error2_rep_t_traces([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 122>>,
    Bin3 = e_mfield_error2_rep_t_traces(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_error2_rep_t_traces(Rest, Bin3, TrUserData);
e_field_error2_rep_t_traces([], Bin, _TrUserData) -> Bin.

e_field_push_routes_req_t_types([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_push_routes_req_t_types(Rest, Bin3, TrUserData);
e_field_push_routes_req_t_types([], Bin, _TrUserData) -> Bin.

e_mfield_pull_routes_rep_t_route_groups(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_route_group_t(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_pull_routes_rep_t_route_groups([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_pull_routes_rep_t_route_groups(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_pull_routes_rep_t_route_groups(Rest, Bin3, TrUserData);
e_field_pull_routes_rep_t_route_groups([], Bin, _TrUserData) -> Bin.

e_field_delete_topics_req_t_topics([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_delete_topics_req_t_topics(Rest, Bin3, TrUserData);
e_field_delete_topics_req_t_topics([], Bin, _TrUserData) -> Bin.

e_field_route_group_t_endpoints([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_route_group_t_endpoints(Rest, Bin3, TrUserData);
e_field_route_group_t_endpoints([], Bin, _TrUserData) -> Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(ping_req_t, Bin, TrUserData) -> id(decode_msg_ping_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(ping_rep_t, Bin, TrUserData) -> id(decode_msg_ping_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pull_req_t, Bin, TrUserData) -> id(decode_msg_pull_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pull_rep_t, Bin, TrUserData) -> id(decode_msg_pull_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(push_req_t, Bin, TrUserData) -> id(decode_msg_push_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(push_rep_t, Bin, TrUserData) -> id(decode_msg_push_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(do_req_t, Bin, TrUserData) -> id(decode_msg_do_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(do_rep_t, Bin, TrUserData) -> id(decode_msg_do_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(do2_req_t, Bin, TrUserData) -> id(decode_msg_do2_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(do2_rep_t, Bin, TrUserData) -> id(decode_msg_do2_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_req_t, Bin, TrUserData) -> id(decode_msg_auth_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_rep_t, Bin, TrUserData) -> id(decode_msg_auth_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(ok_rep_t, Bin, TrUserData) -> id(decode_msg_ok_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(error_rep_t, Bin, TrUserData) -> id(decode_msg_error_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(ok2_rep_t, Bin, TrUserData) -> id(decode_msg_ok2_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(error2_rep_t, Bin, TrUserData) -> id(decode_msg_error2_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(watch_req_t, Bin, TrUserData) -> id(decode_msg_watch_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(watch_rep_t, Bin, TrUserData) -> id(decode_msg_watch_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(unwatch_req_t, Bin, TrUserData) -> id(decode_msg_unwatch_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(unwatch_rep_t, Bin, TrUserData) -> id(decode_msg_unwatch_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(register_frontend_req_t, Bin, TrUserData) -> id(decode_msg_register_frontend_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(register_frontend_rep_t, Bin, TrUserData) -> id(decode_msg_register_frontend_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(add_route_req_t, Bin, TrUserData) -> id(decode_msg_add_route_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(add_route_rep_t, Bin, TrUserData) -> id(decode_msg_add_route_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(delete_route_req_t, Bin, TrUserData) -> id(decode_msg_delete_route_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(delete_route_rep_t, Bin, TrUserData) -> id(decode_msg_delete_route_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(add_route_msg_t, Bin, TrUserData) -> id(decode_msg_add_route_msg_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(delete_route_msg_t, Bin, TrUserData) -> id(decode_msg_delete_route_msg_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(push_routes_req_t, Bin, TrUserData) -> id(decode_msg_push_routes_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(push_routes_rep_t, Bin, TrUserData) -> id(decode_msg_push_routes_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pull_routes_req_t, Bin, TrUserData) -> id(decode_msg_pull_routes_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pull_routes_rep_t, Bin, TrUserData) -> id(decode_msg_pull_routes_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(delete_topics_req_t, Bin, TrUserData) -> id(decode_msg_delete_topics_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(delete_topics_rep_t, Bin, TrUserData) -> id(decode_msg_delete_topics_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(register_backend_req_t, Bin, TrUserData) -> id(decode_msg_register_backend_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(register_backend_rep_t, Bin, TrUserData) -> id(decode_msg_register_backend_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(resolve_frontend_req_t, Bin, TrUserData) -> id(decode_msg_resolve_frontend_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(resolve_frontend_rep_t, Bin, TrUserData) -> id(decode_msg_resolve_frontend_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(resolve_backend_req_t, Bin, TrUserData) -> id(decode_msg_resolve_backend_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(resolve_backend_rep_t, Bin, TrUserData) -> id(decode_msg_resolve_backend_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(resolve_ip_req_t, Bin, TrUserData) -> id(decode_msg_resolve_ip_req_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(resolve_ip_rep_t, Bin, TrUserData) -> id(decode_msg_resolve_ip_rep_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(msg_t, Bin, TrUserData) -> id(decode_msg_msg_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(source_t, Bin, TrUserData) -> id(decode_msg_source_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(trace_t, Bin, TrUserData) -> id(decode_msg_trace_t(Bin, TrUserData), TrUserData);
decode_msg_2_doit(route_group_t, Bin, TrUserData) -> id(decode_msg_route_group_t(Bin, TrUserData), TrUserData).



decode_msg_ping_req_t(Bin, TrUserData) -> dfp_read_field_def_ping_req_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_ping_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_ping_req_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_ping_req_t(<<>>, 0, 0, _, F@_1, _) -> #ping_req_t{ref = F@_1};
dfp_read_field_def_ping_req_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_ping_req_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_ping_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ping_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_ping_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_ping_req_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ping_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_ping_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_ping_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_ping_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_ping_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ping_req_t(<<>>, 0, 0, _, F@_1, _) -> #ping_req_t{ref = F@_1}.

d_field_ping_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_ping_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_ping_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ping_req_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_ping_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_ping_req_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_ping_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ping_req_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_ping_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ping_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_ping_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ping_req_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_ping_req_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ping_req_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_ping_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ping_req_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_ping_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ping_req_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_ping_rep_t(Bin, TrUserData) -> dfp_read_field_def_ping_rep_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_ping_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_ping_rep_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_ping_rep_t(<<>>, 0, 0, _, F@_1, _) -> #ping_rep_t{ref = F@_1};
dfp_read_field_def_ping_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_ping_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_ping_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ping_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_ping_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_ping_rep_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ping_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_ping_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_ping_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_ping_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_ping_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ping_rep_t(<<>>, 0, 0, _, F@_1, _) -> #ping_rep_t{ref = F@_1}.

d_field_ping_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_ping_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_ping_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ping_rep_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_ping_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_ping_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_ping_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ping_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_ping_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ping_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_ping_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ping_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_ping_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ping_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_ping_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ping_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_ping_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ping_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_pull_req_t(Bin, TrUserData) -> dfp_read_field_def_pull_req_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), id(0, TrUserData), id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_pull_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pull_req_t_topic(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pull_req_t(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pull_req_t_offset(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pull_req_t(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pull_req_t_limit(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pull_req_t(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pull_req_t_puller(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pull_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pull_req_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pull_req_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #pull_req_t{topic = F@_1, offset = F@_2, limit = F@_3, puller = F@_4, ref = F@_5};
dfp_read_field_def_pull_req_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_pull_req_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_pull_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_pull_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_pull_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_pull_req_t_topic(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> d_field_pull_req_t_offset(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        24 -> d_field_pull_req_t_limit(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        32 -> d_field_pull_req_t_puller(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        120 -> d_field_pull_req_t_ref(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_pull_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_pull_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_pull_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_pull_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_pull_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_pull_req_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #pull_req_t{topic = F@_1, offset = F@_2, limit = F@_3, puller = F@_4, ref = F@_5}.

d_field_pull_req_t_topic(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pull_req_t_topic(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pull_req_t_topic(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_pull_req_t(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_pull_req_t_offset(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pull_req_t_offset(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pull_req_t_offset(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_pull_req_t(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_pull_req_t_limit(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pull_req_t_limit(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pull_req_t_limit(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_pull_req_t(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_pull_req_t_puller(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pull_req_t_puller(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pull_req_t_puller(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_pull_req_t(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_pull_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pull_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pull_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_pull_req_t(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_pull_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_pull_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_pull_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pull_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_pull_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_pull_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_pull_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pull_req_t(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_pull_req_t(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_pull_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_pull_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pull_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_pull_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pull_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_pull_rep_t(Bin, TrUserData) -> dfp_read_field_def_pull_rep_t(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_pull_rep_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_pull_rep_t_msgs(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_pull_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_pull_rep_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_pull_rep_t(<<>>, 0, 0, _, R1, F@_2, TrUserData) -> #pull_rep_t{msgs = lists_reverse(R1, TrUserData), ref = F@_2};
dfp_read_field_def_pull_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_pull_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_pull_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pull_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_pull_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_pull_rep_t_msgs(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_pull_rep_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_pull_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_pull_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_pull_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_pull_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_pull_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_pull_rep_t(<<>>, 0, 0, _, R1, F@_2, TrUserData) -> #pull_rep_t{msgs = lists_reverse(R1, TrUserData), ref = F@_2}.

d_field_pull_rep_t_msgs(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pull_rep_t_msgs(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_pull_rep_t_msgs(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_msg_t(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pull_rep_t(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_field_pull_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pull_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_pull_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_pull_rep_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_pull_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_pull_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_pull_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pull_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_pull_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pull_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_pull_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pull_rep_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_pull_rep_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_pull_rep_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_pull_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pull_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_pull_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pull_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_push_req_t(Bin, TrUserData) -> dfp_read_field_def_push_req_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_push_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_push_req_t_topic(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_push_req_t(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_push_req_t_value(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_push_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_push_req_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_push_req_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #push_req_t{topic = F@_1, value = F@_2, ref = F@_3};
dfp_read_field_def_push_req_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_push_req_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_push_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_push_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_push_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_push_req_t_topic(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_push_req_t_value(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        120 -> d_field_push_req_t_ref(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_push_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_push_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_push_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_push_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_push_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_push_req_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #push_req_t{topic = F@_1, value = F@_2, ref = F@_3}.

d_field_push_req_t_topic(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_push_req_t_topic(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_push_req_t_topic(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_push_req_t(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_push_req_t_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_push_req_t_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_push_req_t_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_push_req_t(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_push_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_push_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_push_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_push_req_t(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_push_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_push_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_push_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_push_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_push_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_push_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_push_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_push_req_t(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_push_req_t(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_push_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_push_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_push_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_push_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_push_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_push_rep_t(Bin, TrUserData) -> dfp_read_field_def_push_rep_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_push_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_push_rep_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_push_rep_t(<<>>, 0, 0, _, F@_1, _) -> #push_rep_t{ref = F@_1};
dfp_read_field_def_push_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_push_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_push_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_push_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_push_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_push_rep_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_push_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_push_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_push_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_push_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_push_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_push_rep_t(<<>>, 0, 0, _, F@_1, _) -> #push_rep_t{ref = F@_1}.

d_field_push_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_push_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_push_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_push_rep_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_push_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_push_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_push_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_push_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_push_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_push_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_push_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_push_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_push_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_push_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_push_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_push_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_push_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_push_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_do_req_t(Bin, TrUserData) -> dfp_read_field_def_do_req_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(false, TrUserData), id(undefined, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_do_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_do_req_t_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_do_req_t(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_do_req_t_value(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_do_req_t(<<104, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_do_req_t_source_enabled(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_do_req_t(<<114, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_do_req_t_source(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_do_req_t(<<122, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_do_req_t_traces(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_do_req_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, R1, TrUserData) -> #do_req_t{type = F@_1, value = F@_2, source_enabled = F@_3, source = F@_4, traces = lists_reverse(R1, TrUserData)};
dfp_read_field_def_do_req_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_do_req_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_do_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_do_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_do_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_do_req_t_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_do_req_t_value(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        104 -> d_field_do_req_t_source_enabled(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        114 -> d_field_do_req_t_source(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        122 -> d_field_do_req_t_traces(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_do_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_do_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_do_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_do_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_do_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_do_req_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, R1, TrUserData) -> #do_req_t{type = F@_1, value = F@_2, source_enabled = F@_3, source = F@_4, traces = lists_reverse(R1, TrUserData)}.

d_field_do_req_t_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_do_req_t_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_do_req_t_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_do_req_t(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_do_req_t_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_do_req_t_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_do_req_t_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_do_req_t(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_do_req_t_source_enabled(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_do_req_t_source_enabled(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_do_req_t_source_enabled(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_do_req_t(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_do_req_t_source(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_do_req_t_source(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_do_req_t_source(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_source_t(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_do_req_t(RestF,
                                0,
                                0,
                                F,
                                F@_1,
                                F@_2,
                                F@_3,
                                if Prev == undefined -> NewFValue;
                                   true -> merge_msg_source_t(Prev, NewFValue, TrUserData)
                                end,
                                F@_5,
                                TrUserData).

d_field_do_req_t_traces(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_do_req_t_traces(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_do_req_t_traces(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_trace_t(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_do_req_t(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_do_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_do_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_do_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_do_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_do_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_do_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_do_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_do_req_t(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_do_req_t(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_do_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_do_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_do_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_do_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_do_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_do_rep_t(Bin, TrUserData) -> dfp_read_field_def_do_rep_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_do_rep_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_do_rep_t_value(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_do_rep_t(<<122, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_do_rep_t_traces(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_do_rep_t(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #do_rep_t{value = F@_1, traces = lists_reverse(R1, TrUserData)};
dfp_read_field_def_do_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_do_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_do_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_do_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_do_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_do_rep_t_value(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        122 -> d_field_do_rep_t_traces(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_do_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_do_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_do_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_do_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_do_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_do_rep_t(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #do_rep_t{value = F@_1, traces = lists_reverse(R1, TrUserData)}.

d_field_do_rep_t_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_do_rep_t_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_do_rep_t_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_do_rep_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_do_rep_t_traces(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_do_rep_t_traces(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_do_rep_t_traces(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_trace_t(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_do_rep_t(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_do_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_do_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_do_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_do_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_do_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_do_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_do_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_do_rep_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_do_rep_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_do_rep_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_do_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_do_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_do_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_do_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_do2_req_t(Bin, TrUserData) -> dfp_read_field_def_do2_req_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(false, TrUserData), id(undefined, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_do2_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_do2_req_t_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_do2_req_t(<<104, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_do2_req_t_source_enabled(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_do2_req_t(<<114, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_do2_req_t_source(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_do2_req_t(<<122, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_do2_req_t_traces(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_do2_req_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, R1, TrUserData) -> #do2_req_t{type = F@_1, source_enabled = F@_2, source = F@_3, traces = lists_reverse(R1, TrUserData)};
dfp_read_field_def_do2_req_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_do2_req_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_do2_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_do2_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_do2_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_do2_req_t_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        104 -> d_field_do2_req_t_source_enabled(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        114 -> d_field_do2_req_t_source(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        122 -> d_field_do2_req_t_traces(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_do2_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_do2_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_do2_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_do2_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_do2_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_do2_req_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, R1, TrUserData) -> #do2_req_t{type = F@_1, source_enabled = F@_2, source = F@_3, traces = lists_reverse(R1, TrUserData)}.

d_field_do2_req_t_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_do2_req_t_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_do2_req_t_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_do2_req_t(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_do2_req_t_source_enabled(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_do2_req_t_source_enabled(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_do2_req_t_source_enabled(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_do2_req_t(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_do2_req_t_source(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_do2_req_t_source(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_do2_req_t_source(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_source_t(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_do2_req_t(RestF,
                                 0,
                                 0,
                                 F,
                                 F@_1,
                                 F@_2,
                                 if Prev == undefined -> NewFValue;
                                    true -> merge_msg_source_t(Prev, NewFValue, TrUserData)
                                 end,
                                 F@_4,
                                 TrUserData).

d_field_do2_req_t_traces(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_do2_req_t_traces(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_do2_req_t_traces(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_trace_t(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_do2_req_t(RestF, 0, 0, F, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_do2_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_do2_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_do2_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_do2_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_do2_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_do2_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_do2_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_do2_req_t(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_do2_req_t(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_do2_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_do2_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_do2_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_do2_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_do2_req_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_do2_rep_t(Bin, TrUserData) -> dfp_read_field_def_do2_rep_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_do2_rep_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_do2_rep_t_value(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_do2_rep_t(<<122, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_do2_rep_t_traces(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_do2_rep_t(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #do2_rep_t{value = F@_1, traces = lists_reverse(R1, TrUserData)};
dfp_read_field_def_do2_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_do2_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_do2_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_do2_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_do2_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_do2_rep_t_value(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        122 -> d_field_do2_rep_t_traces(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_do2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_do2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_do2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_do2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_do2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_do2_rep_t(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #do2_rep_t{value = F@_1, traces = lists_reverse(R1, TrUserData)}.

d_field_do2_rep_t_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_do2_rep_t_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_do2_rep_t_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_do2_rep_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_do2_rep_t_traces(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_do2_rep_t_traces(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_do2_rep_t_traces(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_trace_t(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_do2_rep_t(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_do2_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_do2_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_do2_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_do2_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_do2_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_do2_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_do2_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_do2_rep_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_do2_rep_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_do2_rep_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_do2_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_do2_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_do2_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_do2_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_auth_req_t(Bin, TrUserData) -> dfp_read_field_def_auth_req_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_auth_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_auth_req_t_token(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_auth_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_auth_req_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_auth_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #auth_req_t{token = F@_1, ref = F@_2};
dfp_read_field_def_auth_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_auth_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_auth_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_auth_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_auth_req_t_token(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_auth_req_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_auth_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_auth_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_auth_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_auth_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_auth_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #auth_req_t{token = F@_1, ref = F@_2}.

d_field_auth_req_t_token(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_auth_req_t_token(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_auth_req_t_token(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_req_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_auth_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_auth_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_auth_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_auth_req_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_auth_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_auth_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_auth_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_auth_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_auth_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_auth_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_auth_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_req_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_auth_req_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_auth_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_auth_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_auth_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_auth_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_auth_rep_t(Bin, TrUserData) -> dfp_read_field_def_auth_rep_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_auth_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_auth_rep_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_auth_rep_t(<<>>, 0, 0, _, F@_1, _) -> #auth_rep_t{ref = F@_1};
dfp_read_field_def_auth_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_auth_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_auth_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_auth_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_auth_rep_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_auth_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_auth_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_auth_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_auth_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_auth_rep_t(<<>>, 0, 0, _, F@_1, _) -> #auth_rep_t{ref = F@_1}.

d_field_auth_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_auth_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_auth_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_auth_rep_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_auth_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_auth_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_auth_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_auth_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_auth_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_auth_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_auth_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_auth_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_auth_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_ok_rep_t(Bin, TrUserData) -> dfp_read_field_def_ok_rep_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_ok_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_ok_rep_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_ok_rep_t(<<>>, 0, 0, _, F@_1, _) -> #ok_rep_t{ref = F@_1};
dfp_read_field_def_ok_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_ok_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_ok_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ok_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_ok_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_ok_rep_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ok_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_ok_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_ok_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_ok_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_ok_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ok_rep_t(<<>>, 0, 0, _, F@_1, _) -> #ok_rep_t{ref = F@_1}.

d_field_ok_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_ok_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_ok_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ok_rep_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_ok_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_ok_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_ok_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ok_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_ok_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ok_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_ok_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ok_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_ok_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ok_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_ok_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ok_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_ok_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ok_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_error_rep_t(Bin, TrUserData) -> dfp_read_field_def_error_rep_t(Bin, 0, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_error_rep_t(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_error_rep_t_code(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_error_rep_t(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_error_rep_t_desc(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_error_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_error_rep_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_error_rep_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #error_rep_t{code = F@_1, desc = F@_2, ref = F@_3};
dfp_read_field_def_error_rep_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_error_rep_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_error_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_error_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_error_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_error_rep_t_code(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_error_rep_t_desc(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        120 -> d_field_error_rep_t_ref(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_error_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_error_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_error_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_error_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_error_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_error_rep_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #error_rep_t{code = F@_1, desc = F@_2, ref = F@_3}.

d_field_error_rep_t_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_error_rep_t_code(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_error_rep_t_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_error_rep_t(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_error_rep_t_desc(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_error_rep_t_desc(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_error_rep_t_desc(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_error_rep_t(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_error_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_error_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_error_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_error_rep_t(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_error_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_error_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_error_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_error_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_error_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_error_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_error_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_error_rep_t(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_error_rep_t(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_error_rep_t(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_error_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_error_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_error_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_error_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_ok2_rep_t(Bin, TrUserData) -> dfp_read_field_def_ok2_rep_t(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_ok2_rep_t(<<122, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_ok2_rep_t_traces(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_ok2_rep_t(<<>>, 0, 0, _, R1, TrUserData) -> #ok2_rep_t{traces = lists_reverse(R1, TrUserData)};
dfp_read_field_def_ok2_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_ok2_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_ok2_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ok2_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_ok2_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        122 -> d_field_ok2_rep_t_traces(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ok2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_ok2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_ok2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_ok2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_ok2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ok2_rep_t(<<>>, 0, 0, _, R1, TrUserData) -> #ok2_rep_t{traces = lists_reverse(R1, TrUserData)}.

d_field_ok2_rep_t_traces(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_ok2_rep_t_traces(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_ok2_rep_t_traces(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_trace_t(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_ok2_rep_t(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_ok2_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_ok2_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_ok2_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ok2_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_ok2_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ok2_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_ok2_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ok2_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_ok2_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ok2_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_ok2_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ok2_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_ok2_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ok2_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_error2_rep_t(Bin, TrUserData) -> dfp_read_field_def_error2_rep_t(Bin, 0, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_error2_rep_t(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_error2_rep_t_code(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_error2_rep_t(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_error2_rep_t_desc(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_error2_rep_t(<<122, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_error2_rep_t_traces(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_error2_rep_t(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #error2_rep_t{code = F@_1, desc = F@_2, traces = lists_reverse(R1, TrUserData)};
dfp_read_field_def_error2_rep_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_error2_rep_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_error2_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_error2_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_error2_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_error2_rep_t_code(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_error2_rep_t_desc(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        122 -> d_field_error2_rep_t_traces(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_error2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_error2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_error2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_error2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_error2_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_error2_rep_t(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #error2_rep_t{code = F@_1, desc = F@_2, traces = lists_reverse(R1, TrUserData)}.

d_field_error2_rep_t_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_error2_rep_t_code(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_error2_rep_t_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_error2_rep_t(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_error2_rep_t_desc(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_error2_rep_t_desc(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_error2_rep_t_desc(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_error2_rep_t(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_error2_rep_t_traces(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_error2_rep_t_traces(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_error2_rep_t_traces(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_trace_t(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_error2_rep_t(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_error2_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_error2_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_error2_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_error2_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_error2_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_error2_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_error2_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_error2_rep_t(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_error2_rep_t(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_error2_rep_t(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_error2_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_error2_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_error2_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_error2_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_watch_req_t(Bin, TrUserData) -> dfp_read_field_def_watch_req_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_watch_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_watch_req_t_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_watch_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_watch_req_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_watch_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #watch_req_t{type = F@_1, ref = F@_2};
dfp_read_field_def_watch_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_watch_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_watch_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_watch_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_watch_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_watch_req_t_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_watch_req_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_watch_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_watch_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_watch_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_watch_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_watch_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_watch_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #watch_req_t{type = F@_1, ref = F@_2}.

d_field_watch_req_t_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_watch_req_t_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_watch_req_t_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_watch_req_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_watch_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_watch_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_watch_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_watch_req_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_watch_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_watch_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_watch_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_watch_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_watch_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_watch_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_watch_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_watch_req_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_watch_req_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_watch_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_watch_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_watch_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_watch_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_watch_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_watch_rep_t(Bin, TrUserData) -> dfp_read_field_def_watch_rep_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_watch_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_watch_rep_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_watch_rep_t(<<>>, 0, 0, _, F@_1, _) -> #watch_rep_t{ref = F@_1};
dfp_read_field_def_watch_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_watch_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_watch_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_watch_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_watch_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_watch_rep_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_watch_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_watch_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_watch_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_watch_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_watch_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_watch_rep_t(<<>>, 0, 0, _, F@_1, _) -> #watch_rep_t{ref = F@_1}.

d_field_watch_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_watch_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_watch_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_watch_rep_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_watch_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_watch_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_watch_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_watch_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_watch_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_watch_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_watch_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_watch_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_watch_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_watch_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_watch_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_watch_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_watch_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_watch_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_unwatch_req_t(Bin, TrUserData) -> dfp_read_field_def_unwatch_req_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_unwatch_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_unwatch_req_t_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_unwatch_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_unwatch_req_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_unwatch_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #unwatch_req_t{type = F@_1, ref = F@_2};
dfp_read_field_def_unwatch_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_unwatch_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_unwatch_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_unwatch_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_unwatch_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_unwatch_req_t_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_unwatch_req_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_unwatch_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_unwatch_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_unwatch_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_unwatch_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_unwatch_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_unwatch_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #unwatch_req_t{type = F@_1, ref = F@_2}.

d_field_unwatch_req_t_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_unwatch_req_t_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_unwatch_req_t_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_unwatch_req_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_unwatch_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_unwatch_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_unwatch_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_unwatch_req_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_unwatch_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_unwatch_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_unwatch_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_unwatch_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_unwatch_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_unwatch_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_unwatch_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_unwatch_req_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_unwatch_req_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_unwatch_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_unwatch_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_unwatch_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_unwatch_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_unwatch_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_unwatch_rep_t(Bin, TrUserData) -> dfp_read_field_def_unwatch_rep_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_unwatch_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_unwatch_rep_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_unwatch_rep_t(<<>>, 0, 0, _, F@_1, _) -> #unwatch_rep_t{ref = F@_1};
dfp_read_field_def_unwatch_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_unwatch_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_unwatch_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_unwatch_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_unwatch_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_unwatch_rep_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_unwatch_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_unwatch_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_unwatch_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_unwatch_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_unwatch_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_unwatch_rep_t(<<>>, 0, 0, _, F@_1, _) -> #unwatch_rep_t{ref = F@_1}.

d_field_unwatch_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_unwatch_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_unwatch_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_unwatch_rep_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_unwatch_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_unwatch_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_unwatch_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_unwatch_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_unwatch_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_unwatch_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_unwatch_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_unwatch_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_unwatch_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_unwatch_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_unwatch_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_unwatch_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_unwatch_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_unwatch_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_register_frontend_req_t(Bin, TrUserData) -> dfp_read_field_def_register_frontend_req_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_register_frontend_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_register_frontend_req_t_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_register_frontend_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_register_frontend_req_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_register_frontend_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #register_frontend_req_t{endpoint = F@_1, ref = F@_2};
dfp_read_field_def_register_frontend_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_register_frontend_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_register_frontend_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_register_frontend_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_register_frontend_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_register_frontend_req_t_endpoint(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_register_frontend_req_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_register_frontend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_register_frontend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_register_frontend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_register_frontend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_register_frontend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_register_frontend_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #register_frontend_req_t{endpoint = F@_1, ref = F@_2}.

d_field_register_frontend_req_t_endpoint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_register_frontend_req_t_endpoint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_register_frontend_req_t_endpoint(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_register_frontend_req_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_register_frontend_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_register_frontend_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_register_frontend_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_register_frontend_req_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_register_frontend_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_register_frontend_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_register_frontend_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_register_frontend_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_register_frontend_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_register_frontend_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_register_frontend_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_register_frontend_req_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_register_frontend_req_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_register_frontend_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_register_frontend_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_register_frontend_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_register_frontend_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_register_frontend_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_register_frontend_rep_t(Bin, TrUserData) -> dfp_read_field_def_register_frontend_rep_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_register_frontend_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_register_frontend_rep_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_register_frontend_rep_t(<<>>, 0, 0, _, F@_1, _) -> #register_frontend_rep_t{ref = F@_1};
dfp_read_field_def_register_frontend_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_register_frontend_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_register_frontend_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_register_frontend_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_register_frontend_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_register_frontend_rep_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_register_frontend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_register_frontend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_register_frontend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_register_frontend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_register_frontend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_register_frontend_rep_t(<<>>, 0, 0, _, F@_1, _) -> #register_frontend_rep_t{ref = F@_1}.

d_field_register_frontend_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_register_frontend_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_register_frontend_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_register_frontend_rep_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_register_frontend_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_register_frontend_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_register_frontend_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_register_frontend_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_register_frontend_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_register_frontend_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_register_frontend_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_register_frontend_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_register_frontend_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_register_frontend_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_register_frontend_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_register_frontend_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_register_frontend_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_register_frontend_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_add_route_req_t(Bin, TrUserData) -> dfp_read_field_def_add_route_req_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_add_route_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_add_route_req_t_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_add_route_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_add_route_req_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_add_route_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #add_route_req_t{type = F@_1, ref = F@_2};
dfp_read_field_def_add_route_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_add_route_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_add_route_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_add_route_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_add_route_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_add_route_req_t_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_add_route_req_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_add_route_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_add_route_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_add_route_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_add_route_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_add_route_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_add_route_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #add_route_req_t{type = F@_1, ref = F@_2}.

d_field_add_route_req_t_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_add_route_req_t_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_add_route_req_t_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_add_route_req_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_add_route_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_add_route_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_add_route_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_add_route_req_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_add_route_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_add_route_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_add_route_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_add_route_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_add_route_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_add_route_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_add_route_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_add_route_req_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_add_route_req_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_add_route_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_add_route_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_add_route_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_add_route_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_add_route_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_add_route_rep_t(Bin, TrUserData) -> dfp_read_field_def_add_route_rep_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_add_route_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_add_route_rep_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_add_route_rep_t(<<>>, 0, 0, _, F@_1, _) -> #add_route_rep_t{ref = F@_1};
dfp_read_field_def_add_route_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_add_route_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_add_route_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_add_route_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_add_route_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_add_route_rep_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_add_route_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_add_route_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_add_route_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_add_route_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_add_route_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_add_route_rep_t(<<>>, 0, 0, _, F@_1, _) -> #add_route_rep_t{ref = F@_1}.

d_field_add_route_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_add_route_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_add_route_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_add_route_rep_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_add_route_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_add_route_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_add_route_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_add_route_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_add_route_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_add_route_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_add_route_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_add_route_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_add_route_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_add_route_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_add_route_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_add_route_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_add_route_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_add_route_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_delete_route_req_t(Bin, TrUserData) -> dfp_read_field_def_delete_route_req_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_delete_route_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_delete_route_req_t_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_delete_route_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_delete_route_req_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_delete_route_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #delete_route_req_t{type = F@_1, ref = F@_2};
dfp_read_field_def_delete_route_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_delete_route_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_delete_route_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_delete_route_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_delete_route_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_delete_route_req_t_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_delete_route_req_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_delete_route_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_delete_route_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_delete_route_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_delete_route_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_delete_route_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_delete_route_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #delete_route_req_t{type = F@_1, ref = F@_2}.

d_field_delete_route_req_t_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_delete_route_req_t_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_delete_route_req_t_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_delete_route_req_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_delete_route_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_delete_route_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_delete_route_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_delete_route_req_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_delete_route_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_delete_route_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_delete_route_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_delete_route_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_delete_route_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_delete_route_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_delete_route_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_route_req_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_delete_route_req_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_route_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_delete_route_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_delete_route_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_delete_route_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_delete_route_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_delete_route_rep_t(Bin, TrUserData) -> dfp_read_field_def_delete_route_rep_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_delete_route_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_delete_route_rep_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_delete_route_rep_t(<<>>, 0, 0, _, F@_1, _) -> #delete_route_rep_t{ref = F@_1};
dfp_read_field_def_delete_route_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_delete_route_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_delete_route_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_delete_route_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_delete_route_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_delete_route_rep_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_delete_route_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_delete_route_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_delete_route_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_delete_route_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_delete_route_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_delete_route_rep_t(<<>>, 0, 0, _, F@_1, _) -> #delete_route_rep_t{ref = F@_1}.

d_field_delete_route_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_delete_route_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_delete_route_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_delete_route_rep_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_delete_route_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_delete_route_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_delete_route_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_delete_route_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_delete_route_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_delete_route_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_delete_route_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_route_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_delete_route_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_route_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_delete_route_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_delete_route_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_delete_route_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_delete_route_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_add_route_msg_t(Bin, TrUserData) -> dfp_read_field_def_add_route_msg_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_add_route_msg_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_add_route_msg_t_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_add_route_msg_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_add_route_msg_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_add_route_msg_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #add_route_msg_t{endpoint = F@_1, ref = F@_2};
dfp_read_field_def_add_route_msg_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_add_route_msg_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_add_route_msg_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_add_route_msg_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_add_route_msg_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_add_route_msg_t_endpoint(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_add_route_msg_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_add_route_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_add_route_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_add_route_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_add_route_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_add_route_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_add_route_msg_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #add_route_msg_t{endpoint = F@_1, ref = F@_2}.

d_field_add_route_msg_t_endpoint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_add_route_msg_t_endpoint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_add_route_msg_t_endpoint(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_add_route_msg_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_add_route_msg_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_add_route_msg_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_add_route_msg_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_add_route_msg_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_add_route_msg_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_add_route_msg_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_add_route_msg_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_add_route_msg_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_add_route_msg_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_add_route_msg_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_add_route_msg_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_add_route_msg_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_add_route_msg_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_add_route_msg_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_add_route_msg_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_add_route_msg_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_add_route_msg_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_add_route_msg_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_delete_route_msg_t(Bin, TrUserData) -> dfp_read_field_def_delete_route_msg_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_delete_route_msg_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_delete_route_msg_t_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_delete_route_msg_t(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_delete_route_msg_t_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_delete_route_msg_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_delete_route_msg_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_delete_route_msg_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #delete_route_msg_t{type = F@_1, endpoint = F@_2, ref = F@_3};
dfp_read_field_def_delete_route_msg_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_delete_route_msg_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_delete_route_msg_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_delete_route_msg_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_delete_route_msg_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_delete_route_msg_t_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_delete_route_msg_t_endpoint(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        120 -> d_field_delete_route_msg_t_ref(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_delete_route_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_delete_route_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_delete_route_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_delete_route_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_delete_route_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_delete_route_msg_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #delete_route_msg_t{type = F@_1, endpoint = F@_2, ref = F@_3}.

d_field_delete_route_msg_t_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_delete_route_msg_t_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_delete_route_msg_t_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_delete_route_msg_t(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_delete_route_msg_t_endpoint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_delete_route_msg_t_endpoint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_delete_route_msg_t_endpoint(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_delete_route_msg_t(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_delete_route_msg_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_delete_route_msg_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_delete_route_msg_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_delete_route_msg_t(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_delete_route_msg_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_delete_route_msg_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_delete_route_msg_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_delete_route_msg_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_delete_route_msg_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_delete_route_msg_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_delete_route_msg_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_route_msg_t(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_delete_route_msg_t(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_route_msg_t(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_delete_route_msg_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_delete_route_msg_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_delete_route_msg_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_delete_route_msg_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_push_routes_req_t(Bin, TrUserData) -> dfp_read_field_def_push_routes_req_t(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_push_routes_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_push_routes_req_t_types(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_push_routes_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_push_routes_req_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_push_routes_req_t(<<>>, 0, 0, _, R1, F@_2, TrUserData) -> #push_routes_req_t{types = lists_reverse(R1, TrUserData), ref = F@_2};
dfp_read_field_def_push_routes_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_push_routes_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_push_routes_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_push_routes_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_push_routes_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_push_routes_req_t_types(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_push_routes_req_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_push_routes_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_push_routes_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_push_routes_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_push_routes_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_push_routes_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_push_routes_req_t(<<>>, 0, 0, _, R1, F@_2, TrUserData) -> #push_routes_req_t{types = lists_reverse(R1, TrUserData), ref = F@_2}.

d_field_push_routes_req_t_types(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_push_routes_req_t_types(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_push_routes_req_t_types(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_push_routes_req_t(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_field_push_routes_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_push_routes_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_push_routes_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_push_routes_req_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_push_routes_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_push_routes_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_push_routes_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_push_routes_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_push_routes_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_push_routes_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_push_routes_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_push_routes_req_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_push_routes_req_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_push_routes_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_push_routes_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_push_routes_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_push_routes_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_push_routes_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_push_routes_rep_t(Bin, TrUserData) -> dfp_read_field_def_push_routes_rep_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_push_routes_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_push_routes_rep_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_push_routes_rep_t(<<>>, 0, 0, _, F@_1, _) -> #push_routes_rep_t{ref = F@_1};
dfp_read_field_def_push_routes_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_push_routes_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_push_routes_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_push_routes_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_push_routes_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_push_routes_rep_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_push_routes_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_push_routes_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_push_routes_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_push_routes_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_push_routes_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_push_routes_rep_t(<<>>, 0, 0, _, F@_1, _) -> #push_routes_rep_t{ref = F@_1}.

d_field_push_routes_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_push_routes_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_push_routes_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_push_routes_rep_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_push_routes_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_push_routes_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_push_routes_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_push_routes_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_push_routes_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_push_routes_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_push_routes_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_push_routes_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_push_routes_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_push_routes_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_push_routes_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_push_routes_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_push_routes_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_push_routes_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_pull_routes_req_t(Bin, TrUserData) -> dfp_read_field_def_pull_routes_req_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_pull_routes_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_pull_routes_req_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_pull_routes_req_t(<<>>, 0, 0, _, F@_1, _) -> #pull_routes_req_t{ref = F@_1};
dfp_read_field_def_pull_routes_req_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_pull_routes_req_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_pull_routes_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_pull_routes_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_pull_routes_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_pull_routes_req_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_pull_routes_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_pull_routes_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_pull_routes_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_pull_routes_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_pull_routes_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_pull_routes_req_t(<<>>, 0, 0, _, F@_1, _) -> #pull_routes_req_t{ref = F@_1}.

d_field_pull_routes_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_pull_routes_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_pull_routes_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_pull_routes_req_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_pull_routes_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_pull_routes_req_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_pull_routes_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_pull_routes_req_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_pull_routes_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_pull_routes_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_pull_routes_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pull_routes_req_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_pull_routes_req_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_pull_routes_req_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_pull_routes_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_pull_routes_req_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_pull_routes_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_pull_routes_req_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_pull_routes_rep_t(Bin, TrUserData) -> dfp_read_field_def_pull_routes_rep_t(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_pull_routes_rep_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_pull_routes_rep_t_route_groups(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_pull_routes_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_pull_routes_rep_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_pull_routes_rep_t(<<>>, 0, 0, _, R1, F@_2, TrUserData) -> #pull_routes_rep_t{route_groups = lists_reverse(R1, TrUserData), ref = F@_2};
dfp_read_field_def_pull_routes_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_pull_routes_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_pull_routes_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pull_routes_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_pull_routes_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_pull_routes_rep_t_route_groups(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_pull_routes_rep_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_pull_routes_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_pull_routes_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_pull_routes_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_pull_routes_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_pull_routes_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_pull_routes_rep_t(<<>>, 0, 0, _, R1, F@_2, TrUserData) -> #pull_routes_rep_t{route_groups = lists_reverse(R1, TrUserData), ref = F@_2}.

d_field_pull_routes_rep_t_route_groups(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pull_routes_rep_t_route_groups(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_pull_routes_rep_t_route_groups(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_route_group_t(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pull_routes_rep_t(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_field_pull_routes_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pull_routes_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_pull_routes_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_pull_routes_rep_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_pull_routes_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_pull_routes_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_pull_routes_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pull_routes_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_pull_routes_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pull_routes_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_pull_routes_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pull_routes_rep_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_pull_routes_rep_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_pull_routes_rep_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_pull_routes_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pull_routes_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_pull_routes_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pull_routes_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_delete_topics_req_t(Bin, TrUserData) -> dfp_read_field_def_delete_topics_req_t(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_delete_topics_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_delete_topics_req_t_topics(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_delete_topics_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_delete_topics_req_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_delete_topics_req_t(<<>>, 0, 0, _, R1, F@_2, TrUserData) -> #delete_topics_req_t{topics = lists_reverse(R1, TrUserData), ref = F@_2};
dfp_read_field_def_delete_topics_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_delete_topics_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_delete_topics_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_delete_topics_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_delete_topics_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_delete_topics_req_t_topics(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_delete_topics_req_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_delete_topics_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_delete_topics_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_delete_topics_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_delete_topics_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_delete_topics_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_delete_topics_req_t(<<>>, 0, 0, _, R1, F@_2, TrUserData) -> #delete_topics_req_t{topics = lists_reverse(R1, TrUserData), ref = F@_2}.

d_field_delete_topics_req_t_topics(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_delete_topics_req_t_topics(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_delete_topics_req_t_topics(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_delete_topics_req_t(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_field_delete_topics_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_delete_topics_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_delete_topics_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_delete_topics_req_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_delete_topics_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_delete_topics_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_delete_topics_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_delete_topics_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_delete_topics_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_delete_topics_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_delete_topics_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_topics_req_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_delete_topics_req_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_topics_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_delete_topics_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_delete_topics_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_delete_topics_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_delete_topics_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_delete_topics_rep_t(Bin, TrUserData) -> dfp_read_field_def_delete_topics_rep_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_delete_topics_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_delete_topics_rep_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_delete_topics_rep_t(<<>>, 0, 0, _, F@_1, _) -> #delete_topics_rep_t{ref = F@_1};
dfp_read_field_def_delete_topics_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_delete_topics_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_delete_topics_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_delete_topics_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_delete_topics_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_delete_topics_rep_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_delete_topics_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_delete_topics_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_delete_topics_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_delete_topics_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_delete_topics_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_delete_topics_rep_t(<<>>, 0, 0, _, F@_1, _) -> #delete_topics_rep_t{ref = F@_1}.

d_field_delete_topics_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_delete_topics_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_delete_topics_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_delete_topics_rep_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_delete_topics_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_delete_topics_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_delete_topics_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_delete_topics_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_delete_topics_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_delete_topics_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_delete_topics_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_topics_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_delete_topics_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_topics_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_delete_topics_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_delete_topics_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_delete_topics_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_delete_topics_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_register_backend_req_t(Bin, TrUserData) -> dfp_read_field_def_register_backend_req_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_register_backend_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_register_backend_req_t_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_register_backend_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_register_backend_req_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_register_backend_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #register_backend_req_t{endpoint = F@_1, ref = F@_2};
dfp_read_field_def_register_backend_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_register_backend_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_register_backend_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_register_backend_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_register_backend_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_register_backend_req_t_endpoint(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_register_backend_req_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_register_backend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_register_backend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_register_backend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_register_backend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_register_backend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_register_backend_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #register_backend_req_t{endpoint = F@_1, ref = F@_2}.

d_field_register_backend_req_t_endpoint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_register_backend_req_t_endpoint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_register_backend_req_t_endpoint(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_register_backend_req_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_register_backend_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_register_backend_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_register_backend_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_register_backend_req_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_register_backend_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_register_backend_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_register_backend_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_register_backend_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_register_backend_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_register_backend_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_register_backend_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_register_backend_req_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_register_backend_req_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_register_backend_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_register_backend_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_register_backend_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_register_backend_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_register_backend_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_register_backend_rep_t(Bin, TrUserData) -> dfp_read_field_def_register_backend_rep_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_register_backend_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_register_backend_rep_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_register_backend_rep_t(<<>>, 0, 0, _, F@_1, _) -> #register_backend_rep_t{ref = F@_1};
dfp_read_field_def_register_backend_rep_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_register_backend_rep_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_register_backend_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_register_backend_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_register_backend_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_register_backend_rep_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_register_backend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_register_backend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_register_backend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_register_backend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_register_backend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_register_backend_rep_t(<<>>, 0, 0, _, F@_1, _) -> #register_backend_rep_t{ref = F@_1}.

d_field_register_backend_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_register_backend_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_register_backend_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_register_backend_rep_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_register_backend_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_register_backend_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_register_backend_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_register_backend_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_register_backend_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_register_backend_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_register_backend_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_register_backend_rep_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_register_backend_rep_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_register_backend_rep_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_register_backend_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_register_backend_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_register_backend_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_register_backend_rep_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_resolve_frontend_req_t(Bin, TrUserData) -> dfp_read_field_def_resolve_frontend_req_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_resolve_frontend_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_resolve_frontend_req_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_resolve_frontend_req_t(<<>>, 0, 0, _, F@_1, _) -> #resolve_frontend_req_t{ref = F@_1};
dfp_read_field_def_resolve_frontend_req_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_resolve_frontend_req_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_resolve_frontend_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_resolve_frontend_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_resolve_frontend_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_resolve_frontend_req_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_resolve_frontend_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_resolve_frontend_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_resolve_frontend_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_resolve_frontend_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_resolve_frontend_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_resolve_frontend_req_t(<<>>, 0, 0, _, F@_1, _) -> #resolve_frontend_req_t{ref = F@_1}.

d_field_resolve_frontend_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_resolve_frontend_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_resolve_frontend_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_resolve_frontend_req_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_resolve_frontend_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_resolve_frontend_req_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_resolve_frontend_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_resolve_frontend_req_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_resolve_frontend_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_resolve_frontend_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_resolve_frontend_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_resolve_frontend_req_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_resolve_frontend_req_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_resolve_frontend_req_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_resolve_frontend_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_resolve_frontend_req_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_resolve_frontend_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_resolve_frontend_req_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_resolve_frontend_rep_t(Bin, TrUserData) -> dfp_read_field_def_resolve_frontend_rep_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_resolve_frontend_rep_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_resolve_frontend_rep_t_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_resolve_frontend_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_resolve_frontend_rep_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_resolve_frontend_rep_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #resolve_frontend_rep_t{endpoint = F@_1, ref = F@_2};
dfp_read_field_def_resolve_frontend_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_resolve_frontend_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_resolve_frontend_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_resolve_frontend_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_resolve_frontend_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_resolve_frontend_rep_t_endpoint(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_resolve_frontend_rep_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_resolve_frontend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_resolve_frontend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_resolve_frontend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_resolve_frontend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_resolve_frontend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_resolve_frontend_rep_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #resolve_frontend_rep_t{endpoint = F@_1, ref = F@_2}.

d_field_resolve_frontend_rep_t_endpoint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_resolve_frontend_rep_t_endpoint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_resolve_frontend_rep_t_endpoint(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_resolve_frontend_rep_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_resolve_frontend_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_resolve_frontend_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_resolve_frontend_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_resolve_frontend_rep_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_resolve_frontend_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_resolve_frontend_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_resolve_frontend_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_resolve_frontend_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_resolve_frontend_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_resolve_frontend_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_resolve_frontend_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_resolve_frontend_rep_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_resolve_frontend_rep_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_resolve_frontend_rep_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_resolve_frontend_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_resolve_frontend_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_resolve_frontend_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_resolve_frontend_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_resolve_backend_req_t(Bin, TrUserData) -> dfp_read_field_def_resolve_backend_req_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_resolve_backend_req_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_resolve_backend_req_t_topic(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_resolve_backend_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_resolve_backend_req_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_resolve_backend_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #resolve_backend_req_t{topic = F@_1, ref = F@_2};
dfp_read_field_def_resolve_backend_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_resolve_backend_req_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_resolve_backend_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_resolve_backend_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_resolve_backend_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_resolve_backend_req_t_topic(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_resolve_backend_req_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_resolve_backend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_resolve_backend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_resolve_backend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_resolve_backend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_resolve_backend_req_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_resolve_backend_req_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #resolve_backend_req_t{topic = F@_1, ref = F@_2}.

d_field_resolve_backend_req_t_topic(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_resolve_backend_req_t_topic(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_resolve_backend_req_t_topic(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_resolve_backend_req_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_resolve_backend_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_resolve_backend_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_resolve_backend_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_resolve_backend_req_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_resolve_backend_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_resolve_backend_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_resolve_backend_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_resolve_backend_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_resolve_backend_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_resolve_backend_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_resolve_backend_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_resolve_backend_req_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_resolve_backend_req_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_resolve_backend_req_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_resolve_backend_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_resolve_backend_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_resolve_backend_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_resolve_backend_req_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_resolve_backend_rep_t(Bin, TrUserData) -> dfp_read_field_def_resolve_backend_rep_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_resolve_backend_rep_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_resolve_backend_rep_t_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_resolve_backend_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_resolve_backend_rep_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_resolve_backend_rep_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #resolve_backend_rep_t{endpoint = F@_1, ref = F@_2};
dfp_read_field_def_resolve_backend_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_resolve_backend_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_resolve_backend_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_resolve_backend_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_resolve_backend_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_resolve_backend_rep_t_endpoint(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_resolve_backend_rep_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_resolve_backend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_resolve_backend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_resolve_backend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_resolve_backend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_resolve_backend_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_resolve_backend_rep_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #resolve_backend_rep_t{endpoint = F@_1, ref = F@_2}.

d_field_resolve_backend_rep_t_endpoint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_resolve_backend_rep_t_endpoint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_resolve_backend_rep_t_endpoint(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_resolve_backend_rep_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_resolve_backend_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_resolve_backend_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_resolve_backend_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_resolve_backend_rep_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_resolve_backend_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_resolve_backend_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_resolve_backend_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_resolve_backend_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_resolve_backend_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_resolve_backend_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_resolve_backend_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_resolve_backend_rep_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_resolve_backend_rep_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_resolve_backend_rep_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_resolve_backend_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_resolve_backend_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_resolve_backend_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_resolve_backend_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_resolve_ip_req_t(Bin, TrUserData) -> dfp_read_field_def_resolve_ip_req_t(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_resolve_ip_req_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_resolve_ip_req_t_ref(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_resolve_ip_req_t(<<>>, 0, 0, _, F@_1, _) -> #resolve_ip_req_t{ref = F@_1};
dfp_read_field_def_resolve_ip_req_t(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_resolve_ip_req_t(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_resolve_ip_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_resolve_ip_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_resolve_ip_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        120 -> d_field_resolve_ip_req_t_ref(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_resolve_ip_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_resolve_ip_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_resolve_ip_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_resolve_ip_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_resolve_ip_req_t(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_resolve_ip_req_t(<<>>, 0, 0, _, F@_1, _) -> #resolve_ip_req_t{ref = F@_1}.

d_field_resolve_ip_req_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_resolve_ip_req_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_resolve_ip_req_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_resolve_ip_req_t(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_resolve_ip_req_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_resolve_ip_req_t(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_resolve_ip_req_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_resolve_ip_req_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_resolve_ip_req_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_resolve_ip_req_t(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_resolve_ip_req_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_resolve_ip_req_t(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_resolve_ip_req_t(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_resolve_ip_req_t(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_resolve_ip_req_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_resolve_ip_req_t(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_resolve_ip_req_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_resolve_ip_req_t(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_resolve_ip_rep_t(Bin, TrUserData) -> dfp_read_field_def_resolve_ip_rep_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_resolve_ip_rep_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_resolve_ip_rep_t_ip(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_resolve_ip_rep_t(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_resolve_ip_rep_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_resolve_ip_rep_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #resolve_ip_rep_t{ip = F@_1, ref = F@_2};
dfp_read_field_def_resolve_ip_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_resolve_ip_rep_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_resolve_ip_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_resolve_ip_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_resolve_ip_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_resolve_ip_rep_t_ip(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        120 -> d_field_resolve_ip_rep_t_ref(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_resolve_ip_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_resolve_ip_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_resolve_ip_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_resolve_ip_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_resolve_ip_rep_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_resolve_ip_rep_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #resolve_ip_rep_t{ip = F@_1, ref = F@_2}.

d_field_resolve_ip_rep_t_ip(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_resolve_ip_rep_t_ip(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_resolve_ip_rep_t_ip(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_resolve_ip_rep_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_resolve_ip_rep_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_resolve_ip_rep_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_resolve_ip_rep_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_resolve_ip_rep_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_resolve_ip_rep_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_resolve_ip_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_resolve_ip_rep_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_resolve_ip_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_resolve_ip_rep_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_resolve_ip_rep_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_resolve_ip_rep_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_resolve_ip_rep_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_resolve_ip_rep_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_resolve_ip_rep_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_resolve_ip_rep_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_resolve_ip_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_resolve_ip_rep_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_resolve_ip_rep_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_msg_t(Bin, TrUserData) -> dfp_read_field_def_msg_t(Bin, 0, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_msg_t(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_msg_t_offset(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_msg_t(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_msg_t_value(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_msg_t(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_msg_t_timestamp(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_msg_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #msg_t{offset = F@_1, value = F@_2, timestamp = F@_3};
dfp_read_field_def_msg_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_msg_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_msg_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_msg_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_msg_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_msg_t_offset(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_msg_t_value(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_msg_t_timestamp(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_msg_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_msg_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #msg_t{offset = F@_1, value = F@_2, timestamp = F@_3}.

d_field_msg_t_offset(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_msg_t_offset(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_msg_t_offset(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_msg_t(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_msg_t_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_msg_t_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_msg_t_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_msg_t(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_msg_t_timestamp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_msg_t_timestamp(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_msg_t_timestamp(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_msg_t(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_msg_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_msg_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_msg_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_msg_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_msg_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_msg_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_msg_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_msg_t(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_msg_t(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_msg_t(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_msg_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_msg_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_msg_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_msg_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_source_t(Bin, TrUserData) -> dfp_read_field_def_source_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_source_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_source_t_agent(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_source_t(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_source_t_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_source_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #source_t{agent = F@_1, endpoint = F@_2};
dfp_read_field_def_source_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_source_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_source_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_source_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_source_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_source_t_agent(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_source_t_endpoint(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_source_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_source_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_source_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_source_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_source_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_source_t(<<>>, 0, 0, _, F@_1, F@_2, _) -> #source_t{agent = F@_1, endpoint = F@_2}.

d_field_source_t_agent(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_source_t_agent(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_source_t_agent(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_source_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_source_t_endpoint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_source_t_endpoint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_source_t_endpoint(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_source_t(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_source_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_source_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_source_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_source_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_source_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_source_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_source_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_source_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_source_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_source_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_source_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_source_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_source_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_source_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_trace_t(Bin, TrUserData) -> dfp_read_field_def_trace_t(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_trace_t(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_trace_t_ref(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_trace_t(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_trace_t_handler_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_trace_t(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_trace_t_node_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_trace_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #trace_t{ref = F@_1, handler_id = F@_2, node_id = F@_3};
dfp_read_field_def_trace_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_trace_t(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_trace_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_trace_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_trace_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_trace_t_ref(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_trace_t_handler_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_trace_t_node_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_trace_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_trace_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_trace_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_trace_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_trace_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_trace_t(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #trace_t{ref = F@_1, handler_id = F@_2, node_id = F@_3}.

d_field_trace_t_ref(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_trace_t_ref(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_trace_t_ref(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_trace_t(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_trace_t_handler_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_trace_t_handler_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_trace_t_handler_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_trace_t(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_trace_t_node_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_trace_t_node_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_trace_t_node_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_trace_t(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_trace_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_trace_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_trace_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_trace_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_trace_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_trace_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_trace_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_trace_t(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_trace_t(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_trace_t(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_trace_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_trace_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_trace_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_trace_t(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_route_group_t(Bin, TrUserData) -> dfp_read_field_def_route_group_t(Bin, 0, 0, 0, id(<<>>, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_route_group_t(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_route_group_t_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_route_group_t(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_route_group_t_endpoints(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_route_group_t(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #route_group_t{type = F@_1, endpoints = lists_reverse(R1, TrUserData)};
dfp_read_field_def_route_group_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_route_group_t(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_route_group_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_route_group_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_route_group_t(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_route_group_t_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_route_group_t_endpoints(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_route_group_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_route_group_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_route_group_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_route_group_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_route_group_t(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_route_group_t(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #route_group_t{type = F@_1, endpoints = lists_reverse(R1, TrUserData)}.

d_field_route_group_t_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_route_group_t_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_route_group_t_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_route_group_t(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_route_group_t_endpoints(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_route_group_t_endpoints(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_route_group_t_endpoints(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_route_group_t(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_route_group_t(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_route_group_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_route_group_t(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_route_group_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_route_group_t(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_route_group_t(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_route_group_t(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_route_group_t(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_route_group_t(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_route_group_t(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_route_group_t(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_route_group_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_route_group_t(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_route_group_t(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        ping_req_t -> merge_msg_ping_req_t(Prev, New, TrUserData);
        ping_rep_t -> merge_msg_ping_rep_t(Prev, New, TrUserData);
        pull_req_t -> merge_msg_pull_req_t(Prev, New, TrUserData);
        pull_rep_t -> merge_msg_pull_rep_t(Prev, New, TrUserData);
        push_req_t -> merge_msg_push_req_t(Prev, New, TrUserData);
        push_rep_t -> merge_msg_push_rep_t(Prev, New, TrUserData);
        do_req_t -> merge_msg_do_req_t(Prev, New, TrUserData);
        do_rep_t -> merge_msg_do_rep_t(Prev, New, TrUserData);
        do2_req_t -> merge_msg_do2_req_t(Prev, New, TrUserData);
        do2_rep_t -> merge_msg_do2_rep_t(Prev, New, TrUserData);
        auth_req_t -> merge_msg_auth_req_t(Prev, New, TrUserData);
        auth_rep_t -> merge_msg_auth_rep_t(Prev, New, TrUserData);
        ok_rep_t -> merge_msg_ok_rep_t(Prev, New, TrUserData);
        error_rep_t -> merge_msg_error_rep_t(Prev, New, TrUserData);
        ok2_rep_t -> merge_msg_ok2_rep_t(Prev, New, TrUserData);
        error2_rep_t -> merge_msg_error2_rep_t(Prev, New, TrUserData);
        watch_req_t -> merge_msg_watch_req_t(Prev, New, TrUserData);
        watch_rep_t -> merge_msg_watch_rep_t(Prev, New, TrUserData);
        unwatch_req_t -> merge_msg_unwatch_req_t(Prev, New, TrUserData);
        unwatch_rep_t -> merge_msg_unwatch_rep_t(Prev, New, TrUserData);
        register_frontend_req_t -> merge_msg_register_frontend_req_t(Prev, New, TrUserData);
        register_frontend_rep_t -> merge_msg_register_frontend_rep_t(Prev, New, TrUserData);
        add_route_req_t -> merge_msg_add_route_req_t(Prev, New, TrUserData);
        add_route_rep_t -> merge_msg_add_route_rep_t(Prev, New, TrUserData);
        delete_route_req_t -> merge_msg_delete_route_req_t(Prev, New, TrUserData);
        delete_route_rep_t -> merge_msg_delete_route_rep_t(Prev, New, TrUserData);
        add_route_msg_t -> merge_msg_add_route_msg_t(Prev, New, TrUserData);
        delete_route_msg_t -> merge_msg_delete_route_msg_t(Prev, New, TrUserData);
        push_routes_req_t -> merge_msg_push_routes_req_t(Prev, New, TrUserData);
        push_routes_rep_t -> merge_msg_push_routes_rep_t(Prev, New, TrUserData);
        pull_routes_req_t -> merge_msg_pull_routes_req_t(Prev, New, TrUserData);
        pull_routes_rep_t -> merge_msg_pull_routes_rep_t(Prev, New, TrUserData);
        delete_topics_req_t -> merge_msg_delete_topics_req_t(Prev, New, TrUserData);
        delete_topics_rep_t -> merge_msg_delete_topics_rep_t(Prev, New, TrUserData);
        register_backend_req_t -> merge_msg_register_backend_req_t(Prev, New, TrUserData);
        register_backend_rep_t -> merge_msg_register_backend_rep_t(Prev, New, TrUserData);
        resolve_frontend_req_t -> merge_msg_resolve_frontend_req_t(Prev, New, TrUserData);
        resolve_frontend_rep_t -> merge_msg_resolve_frontend_rep_t(Prev, New, TrUserData);
        resolve_backend_req_t -> merge_msg_resolve_backend_req_t(Prev, New, TrUserData);
        resolve_backend_rep_t -> merge_msg_resolve_backend_rep_t(Prev, New, TrUserData);
        resolve_ip_req_t -> merge_msg_resolve_ip_req_t(Prev, New, TrUserData);
        resolve_ip_rep_t -> merge_msg_resolve_ip_rep_t(Prev, New, TrUserData);
        msg_t -> merge_msg_msg_t(Prev, New, TrUserData);
        source_t -> merge_msg_source_t(Prev, New, TrUserData);
        trace_t -> merge_msg_trace_t(Prev, New, TrUserData);
        route_group_t -> merge_msg_route_group_t(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_ping_req_t/3}).
merge_msg_ping_req_t(#ping_req_t{ref = PFref}, #ping_req_t{ref = NFref}, _) ->
    #ping_req_t{ref =
                    if NFref =:= undefined -> PFref;
                       true -> NFref
                    end}.

-compile({nowarn_unused_function,merge_msg_ping_rep_t/3}).
merge_msg_ping_rep_t(#ping_rep_t{ref = PFref}, #ping_rep_t{ref = NFref}, _) ->
    #ping_rep_t{ref =
                    if NFref =:= undefined -> PFref;
                       true -> NFref
                    end}.

-compile({nowarn_unused_function,merge_msg_pull_req_t/3}).
merge_msg_pull_req_t(#pull_req_t{topic = PFtopic, offset = PFoffset, limit = PFlimit, puller = PFpuller, ref = PFref}, #pull_req_t{topic = NFtopic, offset = NFoffset, limit = NFlimit, puller = NFpuller, ref = NFref}, _) ->
    #pull_req_t{topic =
                    if NFtopic =:= undefined -> PFtopic;
                       true -> NFtopic
                    end,
                offset =
                    if NFoffset =:= undefined -> PFoffset;
                       true -> NFoffset
                    end,
                limit =
                    if NFlimit =:= undefined -> PFlimit;
                       true -> NFlimit
                    end,
                puller =
                    if NFpuller =:= undefined -> PFpuller;
                       true -> NFpuller
                    end,
                ref =
                    if NFref =:= undefined -> PFref;
                       true -> NFref
                    end}.

-compile({nowarn_unused_function,merge_msg_pull_rep_t/3}).
merge_msg_pull_rep_t(#pull_rep_t{msgs = PFmsgs, ref = PFref}, #pull_rep_t{msgs = NFmsgs, ref = NFref}, TrUserData) ->
    #pull_rep_t{msgs =
                    if PFmsgs /= undefined, NFmsgs /= undefined -> 'erlang_++'(PFmsgs, NFmsgs, TrUserData);
                       PFmsgs == undefined -> NFmsgs;
                       NFmsgs == undefined -> PFmsgs
                    end,
                ref =
                    if NFref =:= undefined -> PFref;
                       true -> NFref
                    end}.

-compile({nowarn_unused_function,merge_msg_push_req_t/3}).
merge_msg_push_req_t(#push_req_t{topic = PFtopic, value = PFvalue, ref = PFref}, #push_req_t{topic = NFtopic, value = NFvalue, ref = NFref}, _) ->
    #push_req_t{topic =
                    if NFtopic =:= undefined -> PFtopic;
                       true -> NFtopic
                    end,
                value =
                    if NFvalue =:= undefined -> PFvalue;
                       true -> NFvalue
                    end,
                ref =
                    if NFref =:= undefined -> PFref;
                       true -> NFref
                    end}.

-compile({nowarn_unused_function,merge_msg_push_rep_t/3}).
merge_msg_push_rep_t(#push_rep_t{ref = PFref}, #push_rep_t{ref = NFref}, _) ->
    #push_rep_t{ref =
                    if NFref =:= undefined -> PFref;
                       true -> NFref
                    end}.

-compile({nowarn_unused_function,merge_msg_do_req_t/3}).
merge_msg_do_req_t(#do_req_t{type = PFtype, value = PFvalue, source_enabled = PFsource_enabled, source = PFsource, traces = PFtraces}, #do_req_t{type = NFtype, value = NFvalue, source_enabled = NFsource_enabled, source = NFsource, traces = NFtraces},
                   TrUserData) ->
    #do_req_t{type =
                  if NFtype =:= undefined -> PFtype;
                     true -> NFtype
                  end,
              value =
                  if NFvalue =:= undefined -> PFvalue;
                     true -> NFvalue
                  end,
              source_enabled =
                  if NFsource_enabled =:= undefined -> PFsource_enabled;
                     true -> NFsource_enabled
                  end,
              source =
                  if PFsource /= undefined, NFsource /= undefined -> merge_msg_source_t(PFsource, NFsource, TrUserData);
                     PFsource == undefined -> NFsource;
                     NFsource == undefined -> PFsource
                  end,
              traces =
                  if PFtraces /= undefined, NFtraces /= undefined -> 'erlang_++'(PFtraces, NFtraces, TrUserData);
                     PFtraces == undefined -> NFtraces;
                     NFtraces == undefined -> PFtraces
                  end}.

-compile({nowarn_unused_function,merge_msg_do_rep_t/3}).
merge_msg_do_rep_t(#do_rep_t{value = PFvalue, traces = PFtraces}, #do_rep_t{value = NFvalue, traces = NFtraces}, TrUserData) ->
    #do_rep_t{value =
                  if NFvalue =:= undefined -> PFvalue;
                     true -> NFvalue
                  end,
              traces =
                  if PFtraces /= undefined, NFtraces /= undefined -> 'erlang_++'(PFtraces, NFtraces, TrUserData);
                     PFtraces == undefined -> NFtraces;
                     NFtraces == undefined -> PFtraces
                  end}.

-compile({nowarn_unused_function,merge_msg_do2_req_t/3}).
merge_msg_do2_req_t(#do2_req_t{type = PFtype, source_enabled = PFsource_enabled, source = PFsource, traces = PFtraces}, #do2_req_t{type = NFtype, source_enabled = NFsource_enabled, source = NFsource, traces = NFtraces}, TrUserData) ->
    #do2_req_t{type =
                   if NFtype =:= undefined -> PFtype;
                      true -> NFtype
                   end,
               source_enabled =
                   if NFsource_enabled =:= undefined -> PFsource_enabled;
                      true -> NFsource_enabled
                   end,
               source =
                   if PFsource /= undefined, NFsource /= undefined -> merge_msg_source_t(PFsource, NFsource, TrUserData);
                      PFsource == undefined -> NFsource;
                      NFsource == undefined -> PFsource
                   end,
               traces =
                   if PFtraces /= undefined, NFtraces /= undefined -> 'erlang_++'(PFtraces, NFtraces, TrUserData);
                      PFtraces == undefined -> NFtraces;
                      NFtraces == undefined -> PFtraces
                   end}.

-compile({nowarn_unused_function,merge_msg_do2_rep_t/3}).
merge_msg_do2_rep_t(#do2_rep_t{value = PFvalue, traces = PFtraces}, #do2_rep_t{value = NFvalue, traces = NFtraces}, TrUserData) ->
    #do2_rep_t{value =
                   if NFvalue =:= undefined -> PFvalue;
                      true -> NFvalue
                   end,
               traces =
                   if PFtraces /= undefined, NFtraces /= undefined -> 'erlang_++'(PFtraces, NFtraces, TrUserData);
                      PFtraces == undefined -> NFtraces;
                      NFtraces == undefined -> PFtraces
                   end}.

-compile({nowarn_unused_function,merge_msg_auth_req_t/3}).
merge_msg_auth_req_t(#auth_req_t{token = PFtoken, ref = PFref}, #auth_req_t{token = NFtoken, ref = NFref}, _) ->
    #auth_req_t{token =
                    if NFtoken =:= undefined -> PFtoken;
                       true -> NFtoken
                    end,
                ref =
                    if NFref =:= undefined -> PFref;
                       true -> NFref
                    end}.

-compile({nowarn_unused_function,merge_msg_auth_rep_t/3}).
merge_msg_auth_rep_t(#auth_rep_t{ref = PFref}, #auth_rep_t{ref = NFref}, _) ->
    #auth_rep_t{ref =
                    if NFref =:= undefined -> PFref;
                       true -> NFref
                    end}.

-compile({nowarn_unused_function,merge_msg_ok_rep_t/3}).
merge_msg_ok_rep_t(#ok_rep_t{ref = PFref}, #ok_rep_t{ref = NFref}, _) ->
    #ok_rep_t{ref =
                  if NFref =:= undefined -> PFref;
                     true -> NFref
                  end}.

-compile({nowarn_unused_function,merge_msg_error_rep_t/3}).
merge_msg_error_rep_t(#error_rep_t{code = PFcode, desc = PFdesc, ref = PFref}, #error_rep_t{code = NFcode, desc = NFdesc, ref = NFref}, _) ->
    #error_rep_t{code =
                     if NFcode =:= undefined -> PFcode;
                        true -> NFcode
                     end,
                 desc =
                     if NFdesc =:= undefined -> PFdesc;
                        true -> NFdesc
                     end,
                 ref =
                     if NFref =:= undefined -> PFref;
                        true -> NFref
                     end}.

-compile({nowarn_unused_function,merge_msg_ok2_rep_t/3}).
merge_msg_ok2_rep_t(#ok2_rep_t{traces = PFtraces}, #ok2_rep_t{traces = NFtraces}, TrUserData) ->
    #ok2_rep_t{traces =
                   if PFtraces /= undefined, NFtraces /= undefined -> 'erlang_++'(PFtraces, NFtraces, TrUserData);
                      PFtraces == undefined -> NFtraces;
                      NFtraces == undefined -> PFtraces
                   end}.

-compile({nowarn_unused_function,merge_msg_error2_rep_t/3}).
merge_msg_error2_rep_t(#error2_rep_t{code = PFcode, desc = PFdesc, traces = PFtraces}, #error2_rep_t{code = NFcode, desc = NFdesc, traces = NFtraces}, TrUserData) ->
    #error2_rep_t{code =
                      if NFcode =:= undefined -> PFcode;
                         true -> NFcode
                      end,
                  desc =
                      if NFdesc =:= undefined -> PFdesc;
                         true -> NFdesc
                      end,
                  traces =
                      if PFtraces /= undefined, NFtraces /= undefined -> 'erlang_++'(PFtraces, NFtraces, TrUserData);
                         PFtraces == undefined -> NFtraces;
                         NFtraces == undefined -> PFtraces
                      end}.

-compile({nowarn_unused_function,merge_msg_watch_req_t/3}).
merge_msg_watch_req_t(#watch_req_t{type = PFtype, ref = PFref}, #watch_req_t{type = NFtype, ref = NFref}, _) ->
    #watch_req_t{type =
                     if NFtype =:= undefined -> PFtype;
                        true -> NFtype
                     end,
                 ref =
                     if NFref =:= undefined -> PFref;
                        true -> NFref
                     end}.

-compile({nowarn_unused_function,merge_msg_watch_rep_t/3}).
merge_msg_watch_rep_t(#watch_rep_t{ref = PFref}, #watch_rep_t{ref = NFref}, _) ->
    #watch_rep_t{ref =
                     if NFref =:= undefined -> PFref;
                        true -> NFref
                     end}.

-compile({nowarn_unused_function,merge_msg_unwatch_req_t/3}).
merge_msg_unwatch_req_t(#unwatch_req_t{type = PFtype, ref = PFref}, #unwatch_req_t{type = NFtype, ref = NFref}, _) ->
    #unwatch_req_t{type =
                       if NFtype =:= undefined -> PFtype;
                          true -> NFtype
                       end,
                   ref =
                       if NFref =:= undefined -> PFref;
                          true -> NFref
                       end}.

-compile({nowarn_unused_function,merge_msg_unwatch_rep_t/3}).
merge_msg_unwatch_rep_t(#unwatch_rep_t{ref = PFref}, #unwatch_rep_t{ref = NFref}, _) ->
    #unwatch_rep_t{ref =
                       if NFref =:= undefined -> PFref;
                          true -> NFref
                       end}.

-compile({nowarn_unused_function,merge_msg_register_frontend_req_t/3}).
merge_msg_register_frontend_req_t(#register_frontend_req_t{endpoint = PFendpoint, ref = PFref}, #register_frontend_req_t{endpoint = NFendpoint, ref = NFref}, _) ->
    #register_frontend_req_t{endpoint =
                                 if NFendpoint =:= undefined -> PFendpoint;
                                    true -> NFendpoint
                                 end,
                             ref =
                                 if NFref =:= undefined -> PFref;
                                    true -> NFref
                                 end}.

-compile({nowarn_unused_function,merge_msg_register_frontend_rep_t/3}).
merge_msg_register_frontend_rep_t(#register_frontend_rep_t{ref = PFref}, #register_frontend_rep_t{ref = NFref}, _) ->
    #register_frontend_rep_t{ref =
                                 if NFref =:= undefined -> PFref;
                                    true -> NFref
                                 end}.

-compile({nowarn_unused_function,merge_msg_add_route_req_t/3}).
merge_msg_add_route_req_t(#add_route_req_t{type = PFtype, ref = PFref}, #add_route_req_t{type = NFtype, ref = NFref}, _) ->
    #add_route_req_t{type =
                         if NFtype =:= undefined -> PFtype;
                            true -> NFtype
                         end,
                     ref =
                         if NFref =:= undefined -> PFref;
                            true -> NFref
                         end}.

-compile({nowarn_unused_function,merge_msg_add_route_rep_t/3}).
merge_msg_add_route_rep_t(#add_route_rep_t{ref = PFref}, #add_route_rep_t{ref = NFref}, _) ->
    #add_route_rep_t{ref =
                         if NFref =:= undefined -> PFref;
                            true -> NFref
                         end}.

-compile({nowarn_unused_function,merge_msg_delete_route_req_t/3}).
merge_msg_delete_route_req_t(#delete_route_req_t{type = PFtype, ref = PFref}, #delete_route_req_t{type = NFtype, ref = NFref}, _) ->
    #delete_route_req_t{type =
                            if NFtype =:= undefined -> PFtype;
                               true -> NFtype
                            end,
                        ref =
                            if NFref =:= undefined -> PFref;
                               true -> NFref
                            end}.

-compile({nowarn_unused_function,merge_msg_delete_route_rep_t/3}).
merge_msg_delete_route_rep_t(#delete_route_rep_t{ref = PFref}, #delete_route_rep_t{ref = NFref}, _) ->
    #delete_route_rep_t{ref =
                            if NFref =:= undefined -> PFref;
                               true -> NFref
                            end}.

-compile({nowarn_unused_function,merge_msg_add_route_msg_t/3}).
merge_msg_add_route_msg_t(#add_route_msg_t{endpoint = PFendpoint, ref = PFref}, #add_route_msg_t{endpoint = NFendpoint, ref = NFref}, _) ->
    #add_route_msg_t{endpoint =
                         if NFendpoint =:= undefined -> PFendpoint;
                            true -> NFendpoint
                         end,
                     ref =
                         if NFref =:= undefined -> PFref;
                            true -> NFref
                         end}.

-compile({nowarn_unused_function,merge_msg_delete_route_msg_t/3}).
merge_msg_delete_route_msg_t(#delete_route_msg_t{type = PFtype, endpoint = PFendpoint, ref = PFref}, #delete_route_msg_t{type = NFtype, endpoint = NFendpoint, ref = NFref}, _) ->
    #delete_route_msg_t{type =
                            if NFtype =:= undefined -> PFtype;
                               true -> NFtype
                            end,
                        endpoint =
                            if NFendpoint =:= undefined -> PFendpoint;
                               true -> NFendpoint
                            end,
                        ref =
                            if NFref =:= undefined -> PFref;
                               true -> NFref
                            end}.

-compile({nowarn_unused_function,merge_msg_push_routes_req_t/3}).
merge_msg_push_routes_req_t(#push_routes_req_t{types = PFtypes, ref = PFref}, #push_routes_req_t{types = NFtypes, ref = NFref}, TrUserData) ->
    #push_routes_req_t{types =
                           if PFtypes /= undefined, NFtypes /= undefined -> 'erlang_++'(PFtypes, NFtypes, TrUserData);
                              PFtypes == undefined -> NFtypes;
                              NFtypes == undefined -> PFtypes
                           end,
                       ref =
                           if NFref =:= undefined -> PFref;
                              true -> NFref
                           end}.

-compile({nowarn_unused_function,merge_msg_push_routes_rep_t/3}).
merge_msg_push_routes_rep_t(#push_routes_rep_t{ref = PFref}, #push_routes_rep_t{ref = NFref}, _) ->
    #push_routes_rep_t{ref =
                           if NFref =:= undefined -> PFref;
                              true -> NFref
                           end}.

-compile({nowarn_unused_function,merge_msg_pull_routes_req_t/3}).
merge_msg_pull_routes_req_t(#pull_routes_req_t{ref = PFref}, #pull_routes_req_t{ref = NFref}, _) ->
    #pull_routes_req_t{ref =
                           if NFref =:= undefined -> PFref;
                              true -> NFref
                           end}.

-compile({nowarn_unused_function,merge_msg_pull_routes_rep_t/3}).
merge_msg_pull_routes_rep_t(#pull_routes_rep_t{route_groups = PFroute_groups, ref = PFref}, #pull_routes_rep_t{route_groups = NFroute_groups, ref = NFref}, TrUserData) ->
    #pull_routes_rep_t{route_groups =
                           if PFroute_groups /= undefined, NFroute_groups /= undefined -> 'erlang_++'(PFroute_groups, NFroute_groups, TrUserData);
                              PFroute_groups == undefined -> NFroute_groups;
                              NFroute_groups == undefined -> PFroute_groups
                           end,
                       ref =
                           if NFref =:= undefined -> PFref;
                              true -> NFref
                           end}.

-compile({nowarn_unused_function,merge_msg_delete_topics_req_t/3}).
merge_msg_delete_topics_req_t(#delete_topics_req_t{topics = PFtopics, ref = PFref}, #delete_topics_req_t{topics = NFtopics, ref = NFref}, TrUserData) ->
    #delete_topics_req_t{topics =
                             if PFtopics /= undefined, NFtopics /= undefined -> 'erlang_++'(PFtopics, NFtopics, TrUserData);
                                PFtopics == undefined -> NFtopics;
                                NFtopics == undefined -> PFtopics
                             end,
                         ref =
                             if NFref =:= undefined -> PFref;
                                true -> NFref
                             end}.

-compile({nowarn_unused_function,merge_msg_delete_topics_rep_t/3}).
merge_msg_delete_topics_rep_t(#delete_topics_rep_t{ref = PFref}, #delete_topics_rep_t{ref = NFref}, _) ->
    #delete_topics_rep_t{ref =
                             if NFref =:= undefined -> PFref;
                                true -> NFref
                             end}.

-compile({nowarn_unused_function,merge_msg_register_backend_req_t/3}).
merge_msg_register_backend_req_t(#register_backend_req_t{endpoint = PFendpoint, ref = PFref}, #register_backend_req_t{endpoint = NFendpoint, ref = NFref}, _) ->
    #register_backend_req_t{endpoint =
                                if NFendpoint =:= undefined -> PFendpoint;
                                   true -> NFendpoint
                                end,
                            ref =
                                if NFref =:= undefined -> PFref;
                                   true -> NFref
                                end}.

-compile({nowarn_unused_function,merge_msg_register_backend_rep_t/3}).
merge_msg_register_backend_rep_t(#register_backend_rep_t{ref = PFref}, #register_backend_rep_t{ref = NFref}, _) ->
    #register_backend_rep_t{ref =
                                if NFref =:= undefined -> PFref;
                                   true -> NFref
                                end}.

-compile({nowarn_unused_function,merge_msg_resolve_frontend_req_t/3}).
merge_msg_resolve_frontend_req_t(#resolve_frontend_req_t{ref = PFref}, #resolve_frontend_req_t{ref = NFref}, _) ->
    #resolve_frontend_req_t{ref =
                                if NFref =:= undefined -> PFref;
                                   true -> NFref
                                end}.

-compile({nowarn_unused_function,merge_msg_resolve_frontend_rep_t/3}).
merge_msg_resolve_frontend_rep_t(#resolve_frontend_rep_t{endpoint = PFendpoint, ref = PFref}, #resolve_frontend_rep_t{endpoint = NFendpoint, ref = NFref}, _) ->
    #resolve_frontend_rep_t{endpoint =
                                if NFendpoint =:= undefined -> PFendpoint;
                                   true -> NFendpoint
                                end,
                            ref =
                                if NFref =:= undefined -> PFref;
                                   true -> NFref
                                end}.

-compile({nowarn_unused_function,merge_msg_resolve_backend_req_t/3}).
merge_msg_resolve_backend_req_t(#resolve_backend_req_t{topic = PFtopic, ref = PFref}, #resolve_backend_req_t{topic = NFtopic, ref = NFref}, _) ->
    #resolve_backend_req_t{topic =
                               if NFtopic =:= undefined -> PFtopic;
                                  true -> NFtopic
                               end,
                           ref =
                               if NFref =:= undefined -> PFref;
                                  true -> NFref
                               end}.

-compile({nowarn_unused_function,merge_msg_resolve_backend_rep_t/3}).
merge_msg_resolve_backend_rep_t(#resolve_backend_rep_t{endpoint = PFendpoint, ref = PFref}, #resolve_backend_rep_t{endpoint = NFendpoint, ref = NFref}, _) ->
    #resolve_backend_rep_t{endpoint =
                               if NFendpoint =:= undefined -> PFendpoint;
                                  true -> NFendpoint
                               end,
                           ref =
                               if NFref =:= undefined -> PFref;
                                  true -> NFref
                               end}.

-compile({nowarn_unused_function,merge_msg_resolve_ip_req_t/3}).
merge_msg_resolve_ip_req_t(#resolve_ip_req_t{ref = PFref}, #resolve_ip_req_t{ref = NFref}, _) ->
    #resolve_ip_req_t{ref =
                          if NFref =:= undefined -> PFref;
                             true -> NFref
                          end}.

-compile({nowarn_unused_function,merge_msg_resolve_ip_rep_t/3}).
merge_msg_resolve_ip_rep_t(#resolve_ip_rep_t{ip = PFip, ref = PFref}, #resolve_ip_rep_t{ip = NFip, ref = NFref}, _) ->
    #resolve_ip_rep_t{ip =
                          if NFip =:= undefined -> PFip;
                             true -> NFip
                          end,
                      ref =
                          if NFref =:= undefined -> PFref;
                             true -> NFref
                          end}.

-compile({nowarn_unused_function,merge_msg_msg_t/3}).
merge_msg_msg_t(#msg_t{offset = PFoffset, value = PFvalue, timestamp = PFtimestamp}, #msg_t{offset = NFoffset, value = NFvalue, timestamp = NFtimestamp}, _) ->
    #msg_t{offset =
               if NFoffset =:= undefined -> PFoffset;
                  true -> NFoffset
               end,
           value =
               if NFvalue =:= undefined -> PFvalue;
                  true -> NFvalue
               end,
           timestamp =
               if NFtimestamp =:= undefined -> PFtimestamp;
                  true -> NFtimestamp
               end}.

-compile({nowarn_unused_function,merge_msg_source_t/3}).
merge_msg_source_t(#source_t{agent = PFagent, endpoint = PFendpoint}, #source_t{agent = NFagent, endpoint = NFendpoint}, _) ->
    #source_t{agent =
                  if NFagent =:= undefined -> PFagent;
                     true -> NFagent
                  end,
              endpoint =
                  if NFendpoint =:= undefined -> PFendpoint;
                     true -> NFendpoint
                  end}.

-compile({nowarn_unused_function,merge_msg_trace_t/3}).
merge_msg_trace_t(#trace_t{ref = PFref, handler_id = PFhandler_id, node_id = PFnode_id}, #trace_t{ref = NFref, handler_id = NFhandler_id, node_id = NFnode_id}, _) ->
    #trace_t{ref =
                 if NFref =:= undefined -> PFref;
                    true -> NFref
                 end,
             handler_id =
                 if NFhandler_id =:= undefined -> PFhandler_id;
                    true -> NFhandler_id
                 end,
             node_id =
                 if NFnode_id =:= undefined -> PFnode_id;
                    true -> NFnode_id
                 end}.

-compile({nowarn_unused_function,merge_msg_route_group_t/3}).
merge_msg_route_group_t(#route_group_t{type = PFtype, endpoints = PFendpoints}, #route_group_t{type = NFtype, endpoints = NFendpoints}, TrUserData) ->
    #route_group_t{type =
                       if NFtype =:= undefined -> PFtype;
                          true -> NFtype
                       end,
                   endpoints =
                       if PFendpoints /= undefined, NFendpoints /= undefined -> 'erlang_++'(PFendpoints, NFendpoints, TrUserData);
                          PFendpoints == undefined -> NFendpoints;
                          NFendpoints == undefined -> PFendpoints
                       end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        ping_req_t -> v_msg_ping_req_t(Msg, [MsgName], TrUserData);
        ping_rep_t -> v_msg_ping_rep_t(Msg, [MsgName], TrUserData);
        pull_req_t -> v_msg_pull_req_t(Msg, [MsgName], TrUserData);
        pull_rep_t -> v_msg_pull_rep_t(Msg, [MsgName], TrUserData);
        push_req_t -> v_msg_push_req_t(Msg, [MsgName], TrUserData);
        push_rep_t -> v_msg_push_rep_t(Msg, [MsgName], TrUserData);
        do_req_t -> v_msg_do_req_t(Msg, [MsgName], TrUserData);
        do_rep_t -> v_msg_do_rep_t(Msg, [MsgName], TrUserData);
        do2_req_t -> v_msg_do2_req_t(Msg, [MsgName], TrUserData);
        do2_rep_t -> v_msg_do2_rep_t(Msg, [MsgName], TrUserData);
        auth_req_t -> v_msg_auth_req_t(Msg, [MsgName], TrUserData);
        auth_rep_t -> v_msg_auth_rep_t(Msg, [MsgName], TrUserData);
        ok_rep_t -> v_msg_ok_rep_t(Msg, [MsgName], TrUserData);
        error_rep_t -> v_msg_error_rep_t(Msg, [MsgName], TrUserData);
        ok2_rep_t -> v_msg_ok2_rep_t(Msg, [MsgName], TrUserData);
        error2_rep_t -> v_msg_error2_rep_t(Msg, [MsgName], TrUserData);
        watch_req_t -> v_msg_watch_req_t(Msg, [MsgName], TrUserData);
        watch_rep_t -> v_msg_watch_rep_t(Msg, [MsgName], TrUserData);
        unwatch_req_t -> v_msg_unwatch_req_t(Msg, [MsgName], TrUserData);
        unwatch_rep_t -> v_msg_unwatch_rep_t(Msg, [MsgName], TrUserData);
        register_frontend_req_t -> v_msg_register_frontend_req_t(Msg, [MsgName], TrUserData);
        register_frontend_rep_t -> v_msg_register_frontend_rep_t(Msg, [MsgName], TrUserData);
        add_route_req_t -> v_msg_add_route_req_t(Msg, [MsgName], TrUserData);
        add_route_rep_t -> v_msg_add_route_rep_t(Msg, [MsgName], TrUserData);
        delete_route_req_t -> v_msg_delete_route_req_t(Msg, [MsgName], TrUserData);
        delete_route_rep_t -> v_msg_delete_route_rep_t(Msg, [MsgName], TrUserData);
        add_route_msg_t -> v_msg_add_route_msg_t(Msg, [MsgName], TrUserData);
        delete_route_msg_t -> v_msg_delete_route_msg_t(Msg, [MsgName], TrUserData);
        push_routes_req_t -> v_msg_push_routes_req_t(Msg, [MsgName], TrUserData);
        push_routes_rep_t -> v_msg_push_routes_rep_t(Msg, [MsgName], TrUserData);
        pull_routes_req_t -> v_msg_pull_routes_req_t(Msg, [MsgName], TrUserData);
        pull_routes_rep_t -> v_msg_pull_routes_rep_t(Msg, [MsgName], TrUserData);
        delete_topics_req_t -> v_msg_delete_topics_req_t(Msg, [MsgName], TrUserData);
        delete_topics_rep_t -> v_msg_delete_topics_rep_t(Msg, [MsgName], TrUserData);
        register_backend_req_t -> v_msg_register_backend_req_t(Msg, [MsgName], TrUserData);
        register_backend_rep_t -> v_msg_register_backend_rep_t(Msg, [MsgName], TrUserData);
        resolve_frontend_req_t -> v_msg_resolve_frontend_req_t(Msg, [MsgName], TrUserData);
        resolve_frontend_rep_t -> v_msg_resolve_frontend_rep_t(Msg, [MsgName], TrUserData);
        resolve_backend_req_t -> v_msg_resolve_backend_req_t(Msg, [MsgName], TrUserData);
        resolve_backend_rep_t -> v_msg_resolve_backend_rep_t(Msg, [MsgName], TrUserData);
        resolve_ip_req_t -> v_msg_resolve_ip_req_t(Msg, [MsgName], TrUserData);
        resolve_ip_rep_t -> v_msg_resolve_ip_rep_t(Msg, [MsgName], TrUserData);
        msg_t -> v_msg_msg_t(Msg, [MsgName], TrUserData);
        source_t -> v_msg_source_t(Msg, [MsgName], TrUserData);
        trace_t -> v_msg_trace_t(Msg, [MsgName], TrUserData);
        route_group_t -> v_msg_route_group_t(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_ping_req_t/3}).
-dialyzer({nowarn_function,v_msg_ping_req_t/3}).
v_msg_ping_req_t(#ping_req_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_ping_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, ping_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_ping_rep_t/3}).
-dialyzer({nowarn_function,v_msg_ping_rep_t/3}).
v_msg_ping_rep_t(#ping_rep_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_ping_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, ping_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_pull_req_t/3}).
-dialyzer({nowarn_function,v_msg_pull_req_t/3}).
v_msg_pull_req_t(#pull_req_t{topic = F1, offset = F2, limit = F3, puller = F4, ref = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [topic | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [offset | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [limit | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [puller | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [ref | Path], TrUserData)
    end,
    ok;
v_msg_pull_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, pull_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_pull_rep_t/3}).
-dialyzer({nowarn_function,v_msg_pull_rep_t/3}).
v_msg_pull_rep_t(#pull_rep_t{msgs = F1, ref = F2}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_msg_t(Elem, [msgs | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, msg_t}}, F1, [msgs | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_pull_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, pull_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_push_req_t/3}).
-dialyzer({nowarn_function,v_msg_push_req_t/3}).
v_msg_push_req_t(#push_req_t{topic = F1, value = F2, ref = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [topic | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [value | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [ref | Path], TrUserData)
    end,
    ok;
v_msg_push_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, push_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_push_rep_t/3}).
-dialyzer({nowarn_function,v_msg_push_rep_t/3}).
v_msg_push_rep_t(#push_rep_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_push_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, push_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_do_req_t/3}).
-dialyzer({nowarn_function,v_msg_do_req_t/3}).
v_msg_do_req_t(#do_req_t{type = F1, value = F2, source_enabled = F3, source = F4, traces = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [value | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [source_enabled | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_source_t(F4, [source | Path], TrUserData)
    end,
    if is_list(F5) ->
           _ = [v_msg_trace_t(Elem, [traces | Path], TrUserData) || Elem <- F5],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, trace_t}}, F5, [traces | Path])
    end,
    ok;
v_msg_do_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, do_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_do_rep_t/3}).
-dialyzer({nowarn_function,v_msg_do_rep_t/3}).
v_msg_do_rep_t(#do_rep_t{value = F1, traces = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [value | Path], TrUserData)
    end,
    if is_list(F2) ->
           _ = [v_msg_trace_t(Elem, [traces | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, trace_t}}, F2, [traces | Path])
    end,
    ok;
v_msg_do_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, do_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_do2_req_t/3}).
-dialyzer({nowarn_function,v_msg_do2_req_t/3}).
v_msg_do2_req_t(#do2_req_t{type = F1, source_enabled = F2, source = F3, traces = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [source_enabled | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_source_t(F3, [source | Path], TrUserData)
    end,
    if is_list(F4) ->
           _ = [v_msg_trace_t(Elem, [traces | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, trace_t}}, F4, [traces | Path])
    end,
    ok;
v_msg_do2_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, do2_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_do2_rep_t/3}).
-dialyzer({nowarn_function,v_msg_do2_rep_t/3}).
v_msg_do2_rep_t(#do2_rep_t{value = F1, traces = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [value | Path], TrUserData)
    end,
    if is_list(F2) ->
           _ = [v_msg_trace_t(Elem, [traces | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, trace_t}}, F2, [traces | Path])
    end,
    ok;
v_msg_do2_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, do2_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_req_t/3}).
-dialyzer({nowarn_function,v_msg_auth_req_t/3}).
v_msg_auth_req_t(#auth_req_t{token = F1, ref = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [token | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_auth_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_rep_t/3}).
-dialyzer({nowarn_function,v_msg_auth_rep_t/3}).
v_msg_auth_rep_t(#auth_rep_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_auth_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_ok_rep_t/3}).
-dialyzer({nowarn_function,v_msg_ok_rep_t/3}).
v_msg_ok_rep_t(#ok_rep_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_ok_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, ok_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_error_rep_t/3}).
-dialyzer({nowarn_function,v_msg_error_rep_t/3}).
v_msg_error_rep_t(#error_rep_t{code = F1, desc = F2, ref = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [desc | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [ref | Path], TrUserData)
    end,
    ok;
v_msg_error_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, error_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_ok2_rep_t/3}).
-dialyzer({nowarn_function,v_msg_ok2_rep_t/3}).
v_msg_ok2_rep_t(#ok2_rep_t{traces = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_trace_t(Elem, [traces | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, trace_t}}, F1, [traces | Path])
    end,
    ok;
v_msg_ok2_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, ok2_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_error2_rep_t/3}).
-dialyzer({nowarn_function,v_msg_error2_rep_t/3}).
v_msg_error2_rep_t(#error2_rep_t{code = F1, desc = F2, traces = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [desc | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_trace_t(Elem, [traces | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, trace_t}}, F3, [traces | Path])
    end,
    ok;
v_msg_error2_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, error2_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_watch_req_t/3}).
-dialyzer({nowarn_function,v_msg_watch_req_t/3}).
v_msg_watch_req_t(#watch_req_t{type = F1, ref = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_watch_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, watch_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_watch_rep_t/3}).
-dialyzer({nowarn_function,v_msg_watch_rep_t/3}).
v_msg_watch_rep_t(#watch_rep_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_watch_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, watch_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_unwatch_req_t/3}).
-dialyzer({nowarn_function,v_msg_unwatch_req_t/3}).
v_msg_unwatch_req_t(#unwatch_req_t{type = F1, ref = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_unwatch_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, unwatch_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_unwatch_rep_t/3}).
-dialyzer({nowarn_function,v_msg_unwatch_rep_t/3}).
v_msg_unwatch_rep_t(#unwatch_rep_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_unwatch_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, unwatch_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_register_frontend_req_t/3}).
-dialyzer({nowarn_function,v_msg_register_frontend_req_t/3}).
v_msg_register_frontend_req_t(#register_frontend_req_t{endpoint = F1, ref = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [endpoint | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_register_frontend_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, register_frontend_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_register_frontend_rep_t/3}).
-dialyzer({nowarn_function,v_msg_register_frontend_rep_t/3}).
v_msg_register_frontend_rep_t(#register_frontend_rep_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_register_frontend_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, register_frontend_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_add_route_req_t/3}).
-dialyzer({nowarn_function,v_msg_add_route_req_t/3}).
v_msg_add_route_req_t(#add_route_req_t{type = F1, ref = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_add_route_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, add_route_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_add_route_rep_t/3}).
-dialyzer({nowarn_function,v_msg_add_route_rep_t/3}).
v_msg_add_route_rep_t(#add_route_rep_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_add_route_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, add_route_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_delete_route_req_t/3}).
-dialyzer({nowarn_function,v_msg_delete_route_req_t/3}).
v_msg_delete_route_req_t(#delete_route_req_t{type = F1, ref = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_delete_route_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, delete_route_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_delete_route_rep_t/3}).
-dialyzer({nowarn_function,v_msg_delete_route_rep_t/3}).
v_msg_delete_route_rep_t(#delete_route_rep_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_delete_route_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, delete_route_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_add_route_msg_t/3}).
-dialyzer({nowarn_function,v_msg_add_route_msg_t/3}).
v_msg_add_route_msg_t(#add_route_msg_t{endpoint = F1, ref = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [endpoint | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_add_route_msg_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, add_route_msg_t}, X, Path).

-compile({nowarn_unused_function,v_msg_delete_route_msg_t/3}).
-dialyzer({nowarn_function,v_msg_delete_route_msg_t/3}).
v_msg_delete_route_msg_t(#delete_route_msg_t{type = F1, endpoint = F2, ref = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [endpoint | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [ref | Path], TrUserData)
    end,
    ok;
v_msg_delete_route_msg_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, delete_route_msg_t}, X, Path).

-compile({nowarn_unused_function,v_msg_push_routes_req_t/3}).
-dialyzer({nowarn_function,v_msg_push_routes_req_t/3}).
v_msg_push_routes_req_t(#push_routes_req_t{types = F1, ref = F2}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_type_string(Elem, [types | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, string}, F1, [types | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_push_routes_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, push_routes_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_push_routes_rep_t/3}).
-dialyzer({nowarn_function,v_msg_push_routes_rep_t/3}).
v_msg_push_routes_rep_t(#push_routes_rep_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_push_routes_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, push_routes_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_pull_routes_req_t/3}).
-dialyzer({nowarn_function,v_msg_pull_routes_req_t/3}).
v_msg_pull_routes_req_t(#pull_routes_req_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_pull_routes_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, pull_routes_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_pull_routes_rep_t/3}).
-dialyzer({nowarn_function,v_msg_pull_routes_rep_t/3}).
v_msg_pull_routes_rep_t(#pull_routes_rep_t{route_groups = F1, ref = F2}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_route_group_t(Elem, [route_groups | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, route_group_t}}, F1, [route_groups | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_pull_routes_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, pull_routes_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_delete_topics_req_t/3}).
-dialyzer({nowarn_function,v_msg_delete_topics_req_t/3}).
v_msg_delete_topics_req_t(#delete_topics_req_t{topics = F1, ref = F2}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_type_string(Elem, [topics | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, string}, F1, [topics | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_delete_topics_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, delete_topics_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_delete_topics_rep_t/3}).
-dialyzer({nowarn_function,v_msg_delete_topics_rep_t/3}).
v_msg_delete_topics_rep_t(#delete_topics_rep_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_delete_topics_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, delete_topics_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_register_backend_req_t/3}).
-dialyzer({nowarn_function,v_msg_register_backend_req_t/3}).
v_msg_register_backend_req_t(#register_backend_req_t{endpoint = F1, ref = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [endpoint | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_register_backend_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, register_backend_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_register_backend_rep_t/3}).
-dialyzer({nowarn_function,v_msg_register_backend_rep_t/3}).
v_msg_register_backend_rep_t(#register_backend_rep_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_register_backend_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, register_backend_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_resolve_frontend_req_t/3}).
-dialyzer({nowarn_function,v_msg_resolve_frontend_req_t/3}).
v_msg_resolve_frontend_req_t(#resolve_frontend_req_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_resolve_frontend_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, resolve_frontend_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_resolve_frontend_rep_t/3}).
-dialyzer({nowarn_function,v_msg_resolve_frontend_rep_t/3}).
v_msg_resolve_frontend_rep_t(#resolve_frontend_rep_t{endpoint = F1, ref = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [endpoint | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_resolve_frontend_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, resolve_frontend_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_resolve_backend_req_t/3}).
-dialyzer({nowarn_function,v_msg_resolve_backend_req_t/3}).
v_msg_resolve_backend_req_t(#resolve_backend_req_t{topic = F1, ref = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [topic | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_resolve_backend_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, resolve_backend_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_resolve_backend_rep_t/3}).
-dialyzer({nowarn_function,v_msg_resolve_backend_rep_t/3}).
v_msg_resolve_backend_rep_t(#resolve_backend_rep_t{endpoint = F1, ref = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [endpoint | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_resolve_backend_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, resolve_backend_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_resolve_ip_req_t/3}).
-dialyzer({nowarn_function,v_msg_resolve_ip_req_t/3}).
v_msg_resolve_ip_req_t(#resolve_ip_req_t{ref = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    ok;
v_msg_resolve_ip_req_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, resolve_ip_req_t}, X, Path).

-compile({nowarn_unused_function,v_msg_resolve_ip_rep_t/3}).
-dialyzer({nowarn_function,v_msg_resolve_ip_rep_t/3}).
v_msg_resolve_ip_rep_t(#resolve_ip_rep_t{ip = F1, ref = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [ip | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ref | Path], TrUserData)
    end,
    ok;
v_msg_resolve_ip_rep_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, resolve_ip_rep_t}, X, Path).

-compile({nowarn_unused_function,v_msg_msg_t/3}).
-dialyzer({nowarn_function,v_msg_msg_t/3}).
v_msg_msg_t(#msg_t{offset = F1, value = F2, timestamp = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [offset | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [value | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [timestamp | Path], TrUserData)
    end,
    ok;
v_msg_msg_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, msg_t}, X, Path).

-compile({nowarn_unused_function,v_msg_source_t/3}).
-dialyzer({nowarn_function,v_msg_source_t/3}).
v_msg_source_t(#source_t{agent = F1, endpoint = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [agent | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [endpoint | Path], TrUserData)
    end,
    ok;
v_msg_source_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, source_t}, X, Path).

-compile({nowarn_unused_function,v_msg_trace_t/3}).
-dialyzer({nowarn_function,v_msg_trace_t/3}).
v_msg_trace_t(#trace_t{ref = F1, handler_id = F2, node_id = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ref | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [handler_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [node_id | Path], TrUserData)
    end,
    ok;
v_msg_trace_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, trace_t}, X, Path).

-compile({nowarn_unused_function,v_msg_route_group_t/3}).
-dialyzer({nowarn_function,v_msg_route_group_t/3}).
v_msg_route_group_t(#route_group_t{type = F1, endpoints = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if is_list(F2) ->
           _ = [v_type_string(Elem, [endpoints | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, string}, F2, [endpoints | Path])
    end,
    ok;
v_msg_route_group_t(X, Path, _TrUserData) -> mk_type_error({expected_msg, route_group_t}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, msg_type_t},
      [{'UNKNOWN', 0},
       {'PING_REQ', 1},
       {'PING_REP', 2},
       {'PULL_REQ', 3},
       {'PULL_REP', 4},
       {'PUSH_REQ', 5},
       {'PUSH_REP', 6},
       {'DO_REQ', 7},
       {'DO_REP', 8},
       {'DO2_REQ', 9},
       {'DO2_REP', 10},
       {'AUTH_REQ', 27},
       {'AUTH_REP', 28},
       {'OK_REP', 29},
       {'ERROR_REP', 30},
       {'OK2_REP', 31},
       {'ERROR2_REP', 32},
       {'REGISTER_FRONTEND_REQ', 65},
       {'REGISTER_FRONTEND_REP', 66},
       {'ADD_ROUTE_REQ', 67},
       {'ADD_ROUTE_REP', 68},
       {'DELETE_ROUTE_REQ', 69},
       {'DELETE_ROUTE_REP', 70},
       {'ADD_ROUTE_MSG', 71},
       {'DELETE_ROUTE_MSG', 72},
       {'PUSH_ROUTES_REQ', 73},
       {'PUSH_ROUTES_REP', 74},
       {'PULL_ROUTES_REQ', 75},
       {'PULL_ROUTES_REP', 76},
       {'REGISTER_BACKEND_REQ', 81},
       {'REGISTER_BACKEND_REP', 82},
       {'DELETE_TOPICS_REQ', 83},
       {'DELETE_TOPICS_REP', 84},
       {'RESOLVE_FRONTEND_REQ', 97},
       {'RESOLVE_FRONTEND_REP', 98},
       {'RESOLVE_BACKEND_REQ', 99},
       {'RESOLVE_BACKEND_REP', 100},
       {'WATCH_REQ', 105},
       {'WATCH_REP', 106},
       {'UNWATCH_REQ', 107},
       {'UNWATCH_REP', 108},
       {'RESOLVE_IP_REQ', 121},
       {'RESOLVE_IP_REP', 122}]},
     {{msg, ping_req_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, ping_rep_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, pull_req_t},
      [#field{name = topic, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = offset, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = limit, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = puller, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
       #field{name = ref, fnum = 15, rnum = 6, type = uint32, occurrence = optional, opts = []}]},
     {{msg, pull_rep_t}, [#field{name = msgs, fnum = 1, rnum = 2, type = {msg, msg_t}, occurrence = repeated, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, push_req_t},
      [#field{name = topic, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
       #field{name = ref, fnum = 15, rnum = 4, type = uint32, occurrence = optional, opts = []}]},
     {{msg, push_rep_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, do_req_t},
      [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = source_enabled, fnum = 13, rnum = 4, type = bool, occurrence = optional, opts = []},
       #field{name = source, fnum = 14, rnum = 5, type = {msg, source_t}, occurrence = optional, opts = []},
       #field{name = traces, fnum = 15, rnum = 6, type = {msg, trace_t}, occurrence = repeated, opts = []}]},
     {{msg, do_rep_t}, [#field{name = value, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = traces, fnum = 15, rnum = 3, type = {msg, trace_t}, occurrence = repeated, opts = []}]},
     {{msg, do2_req_t},
      [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = source_enabled, fnum = 13, rnum = 3, type = bool, occurrence = optional, opts = []},
       #field{name = source, fnum = 14, rnum = 4, type = {msg, source_t}, occurrence = optional, opts = []},
       #field{name = traces, fnum = 15, rnum = 5, type = {msg, trace_t}, occurrence = repeated, opts = []}]},
     {{msg, do2_rep_t}, [#field{name = value, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}, #field{name = traces, fnum = 15, rnum = 3, type = {msg, trace_t}, occurrence = repeated, opts = []}]},
     {{msg, auth_req_t}, [#field{name = token, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, auth_rep_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, ok_rep_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, error_rep_t},
      [#field{name = code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []},
       #field{name = desc, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = ref, fnum = 15, rnum = 4, type = uint32, occurrence = optional, opts = []}]},
     {{msg, ok2_rep_t}, [#field{name = traces, fnum = 15, rnum = 2, type = {msg, trace_t}, occurrence = repeated, opts = []}]},
     {{msg, error2_rep_t},
      [#field{name = code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []},
       #field{name = desc, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = traces, fnum = 15, rnum = 4, type = {msg, trace_t}, occurrence = repeated, opts = []}]},
     {{msg, watch_req_t}, [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, watch_rep_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, unwatch_req_t}, [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, unwatch_rep_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, register_frontend_req_t}, [#field{name = endpoint, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, register_frontend_rep_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, add_route_req_t}, [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, add_route_rep_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, delete_route_req_t}, [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, delete_route_rep_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, add_route_msg_t}, [#field{name = endpoint, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, delete_route_msg_t},
      [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = endpoint, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = ref, fnum = 15, rnum = 4, type = uint32, occurrence = optional, opts = []}]},
     {{msg, push_routes_req_t}, [#field{name = types, fnum = 1, rnum = 2, type = string, occurrence = repeated, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, push_routes_rep_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, pull_routes_req_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, pull_routes_rep_t}, [#field{name = route_groups, fnum = 1, rnum = 2, type = {msg, route_group_t}, occurrence = repeated, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, delete_topics_req_t}, [#field{name = topics, fnum = 1, rnum = 2, type = string, occurrence = repeated, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, delete_topics_rep_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, register_backend_req_t}, [#field{name = endpoint, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, register_backend_rep_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, resolve_frontend_req_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, resolve_frontend_rep_t}, [#field{name = endpoint, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, resolve_backend_req_t}, [#field{name = topic, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, resolve_backend_rep_t}, [#field{name = endpoint, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, resolve_ip_req_t}, [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, resolve_ip_rep_t}, [#field{name = ip, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, msg_t},
      [#field{name = offset, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
       #field{name = timestamp, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []}]},
     {{msg, source_t}, [#field{name = agent, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = endpoint, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}]},
     {{msg, trace_t},
      [#field{name = ref, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = handler_id, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = node_id, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}]},
     {{msg, route_group_t}, [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = endpoints, fnum = 2, rnum = 3, type = string, occurrence = repeated, opts = []}]}].


get_msg_names() ->
    [ping_req_t,
     ping_rep_t,
     pull_req_t,
     pull_rep_t,
     push_req_t,
     push_rep_t,
     do_req_t,
     do_rep_t,
     do2_req_t,
     do2_rep_t,
     auth_req_t,
     auth_rep_t,
     ok_rep_t,
     error_rep_t,
     ok2_rep_t,
     error2_rep_t,
     watch_req_t,
     watch_rep_t,
     unwatch_req_t,
     unwatch_rep_t,
     register_frontend_req_t,
     register_frontend_rep_t,
     add_route_req_t,
     add_route_rep_t,
     delete_route_req_t,
     delete_route_rep_t,
     add_route_msg_t,
     delete_route_msg_t,
     push_routes_req_t,
     push_routes_rep_t,
     pull_routes_req_t,
     pull_routes_rep_t,
     delete_topics_req_t,
     delete_topics_rep_t,
     register_backend_req_t,
     register_backend_rep_t,
     resolve_frontend_req_t,
     resolve_frontend_rep_t,
     resolve_backend_req_t,
     resolve_backend_rep_t,
     resolve_ip_req_t,
     resolve_ip_rep_t,
     msg_t,
     source_t,
     trace_t,
     route_group_t].


get_group_names() -> [].


get_msg_or_group_names() ->
    [ping_req_t,
     ping_rep_t,
     pull_req_t,
     pull_rep_t,
     push_req_t,
     push_rep_t,
     do_req_t,
     do_rep_t,
     do2_req_t,
     do2_rep_t,
     auth_req_t,
     auth_rep_t,
     ok_rep_t,
     error_rep_t,
     ok2_rep_t,
     error2_rep_t,
     watch_req_t,
     watch_rep_t,
     unwatch_req_t,
     unwatch_rep_t,
     register_frontend_req_t,
     register_frontend_rep_t,
     add_route_req_t,
     add_route_rep_t,
     delete_route_req_t,
     delete_route_rep_t,
     add_route_msg_t,
     delete_route_msg_t,
     push_routes_req_t,
     push_routes_rep_t,
     pull_routes_req_t,
     pull_routes_rep_t,
     delete_topics_req_t,
     delete_topics_rep_t,
     register_backend_req_t,
     register_backend_rep_t,
     resolve_frontend_req_t,
     resolve_frontend_rep_t,
     resolve_backend_req_t,
     resolve_backend_rep_t,
     resolve_ip_req_t,
     resolve_ip_rep_t,
     msg_t,
     source_t,
     trace_t,
     route_group_t].


get_enum_names() -> [msg_type_t].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(ping_req_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(ping_rep_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(pull_req_t) ->
    [#field{name = topic, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = offset, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = limit, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = puller, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
     #field{name = ref, fnum = 15, rnum = 6, type = uint32, occurrence = optional, opts = []}];
find_msg_def(pull_rep_t) -> [#field{name = msgs, fnum = 1, rnum = 2, type = {msg, msg_t}, occurrence = repeated, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(push_req_t) ->
    [#field{name = topic, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
     #field{name = ref, fnum = 15, rnum = 4, type = uint32, occurrence = optional, opts = []}];
find_msg_def(push_rep_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(do_req_t) ->
    [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = source_enabled, fnum = 13, rnum = 4, type = bool, occurrence = optional, opts = []},
     #field{name = source, fnum = 14, rnum = 5, type = {msg, source_t}, occurrence = optional, opts = []},
     #field{name = traces, fnum = 15, rnum = 6, type = {msg, trace_t}, occurrence = repeated, opts = []}];
find_msg_def(do_rep_t) -> [#field{name = value, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = traces, fnum = 15, rnum = 3, type = {msg, trace_t}, occurrence = repeated, opts = []}];
find_msg_def(do2_req_t) ->
    [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = source_enabled, fnum = 13, rnum = 3, type = bool, occurrence = optional, opts = []},
     #field{name = source, fnum = 14, rnum = 4, type = {msg, source_t}, occurrence = optional, opts = []},
     #field{name = traces, fnum = 15, rnum = 5, type = {msg, trace_t}, occurrence = repeated, opts = []}];
find_msg_def(do2_rep_t) -> [#field{name = value, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}, #field{name = traces, fnum = 15, rnum = 3, type = {msg, trace_t}, occurrence = repeated, opts = []}];
find_msg_def(auth_req_t) -> [#field{name = token, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(auth_rep_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(ok_rep_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(error_rep_t) ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []},
     #field{name = desc, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = ref, fnum = 15, rnum = 4, type = uint32, occurrence = optional, opts = []}];
find_msg_def(ok2_rep_t) -> [#field{name = traces, fnum = 15, rnum = 2, type = {msg, trace_t}, occurrence = repeated, opts = []}];
find_msg_def(error2_rep_t) ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []},
     #field{name = desc, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = traces, fnum = 15, rnum = 4, type = {msg, trace_t}, occurrence = repeated, opts = []}];
find_msg_def(watch_req_t) -> [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(watch_rep_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(unwatch_req_t) -> [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(unwatch_rep_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(register_frontend_req_t) -> [#field{name = endpoint, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(register_frontend_rep_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(add_route_req_t) -> [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(add_route_rep_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(delete_route_req_t) -> [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(delete_route_rep_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(add_route_msg_t) -> [#field{name = endpoint, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(delete_route_msg_t) ->
    [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = endpoint, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = ref, fnum = 15, rnum = 4, type = uint32, occurrence = optional, opts = []}];
find_msg_def(push_routes_req_t) -> [#field{name = types, fnum = 1, rnum = 2, type = string, occurrence = repeated, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(push_routes_rep_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(pull_routes_req_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(pull_routes_rep_t) -> [#field{name = route_groups, fnum = 1, rnum = 2, type = {msg, route_group_t}, occurrence = repeated, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(delete_topics_req_t) -> [#field{name = topics, fnum = 1, rnum = 2, type = string, occurrence = repeated, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(delete_topics_rep_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(register_backend_req_t) -> [#field{name = endpoint, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(register_backend_rep_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(resolve_frontend_req_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(resolve_frontend_rep_t) -> [#field{name = endpoint, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(resolve_backend_req_t) -> [#field{name = topic, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(resolve_backend_rep_t) -> [#field{name = endpoint, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(resolve_ip_req_t) -> [#field{name = ref, fnum = 15, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(resolve_ip_rep_t) -> [#field{name = ip, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ref, fnum = 15, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def(msg_t) ->
    [#field{name = offset, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
     #field{name = timestamp, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []}];
find_msg_def(source_t) -> [#field{name = agent, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = endpoint, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}];
find_msg_def(trace_t) ->
    [#field{name = ref, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = handler_id, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = node_id, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}];
find_msg_def(route_group_t) -> [#field{name = type, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = endpoints, fnum = 2, rnum = 3, type = string, occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def(msg_type_t) ->
    [{'UNKNOWN', 0},
     {'PING_REQ', 1},
     {'PING_REP', 2},
     {'PULL_REQ', 3},
     {'PULL_REP', 4},
     {'PUSH_REQ', 5},
     {'PUSH_REP', 6},
     {'DO_REQ', 7},
     {'DO_REP', 8},
     {'DO2_REQ', 9},
     {'DO2_REP', 10},
     {'AUTH_REQ', 27},
     {'AUTH_REP', 28},
     {'OK_REP', 29},
     {'ERROR_REP', 30},
     {'OK2_REP', 31},
     {'ERROR2_REP', 32},
     {'REGISTER_FRONTEND_REQ', 65},
     {'REGISTER_FRONTEND_REP', 66},
     {'ADD_ROUTE_REQ', 67},
     {'ADD_ROUTE_REP', 68},
     {'DELETE_ROUTE_REQ', 69},
     {'DELETE_ROUTE_REP', 70},
     {'ADD_ROUTE_MSG', 71},
     {'DELETE_ROUTE_MSG', 72},
     {'PUSH_ROUTES_REQ', 73},
     {'PUSH_ROUTES_REP', 74},
     {'PULL_ROUTES_REQ', 75},
     {'PULL_ROUTES_REP', 76},
     {'REGISTER_BACKEND_REQ', 81},
     {'REGISTER_BACKEND_REP', 82},
     {'DELETE_TOPICS_REQ', 83},
     {'DELETE_TOPICS_REP', 84},
     {'RESOLVE_FRONTEND_REQ', 97},
     {'RESOLVE_FRONTEND_REP', 98},
     {'RESOLVE_BACKEND_REQ', 99},
     {'RESOLVE_BACKEND_REP', 100},
     {'WATCH_REQ', 105},
     {'WATCH_REP', 106},
     {'UNWATCH_REQ', 107},
     {'UNWATCH_REP', 108},
     {'RESOLVE_IP_REQ', 121},
     {'RESOLVE_IP_REP', 122}];
find_enum_def(_) -> error.


enum_symbol_by_value(msg_type_t, Value) -> enum_symbol_by_value_msg_type_t(Value).


enum_value_by_symbol(msg_type_t, Sym) -> enum_value_by_symbol_msg_type_t(Sym).


enum_symbol_by_value_msg_type_t(0) -> 'UNKNOWN';
enum_symbol_by_value_msg_type_t(1) -> 'PING_REQ';
enum_symbol_by_value_msg_type_t(2) -> 'PING_REP';
enum_symbol_by_value_msg_type_t(3) -> 'PULL_REQ';
enum_symbol_by_value_msg_type_t(4) -> 'PULL_REP';
enum_symbol_by_value_msg_type_t(5) -> 'PUSH_REQ';
enum_symbol_by_value_msg_type_t(6) -> 'PUSH_REP';
enum_symbol_by_value_msg_type_t(7) -> 'DO_REQ';
enum_symbol_by_value_msg_type_t(8) -> 'DO_REP';
enum_symbol_by_value_msg_type_t(9) -> 'DO2_REQ';
enum_symbol_by_value_msg_type_t(10) -> 'DO2_REP';
enum_symbol_by_value_msg_type_t(27) -> 'AUTH_REQ';
enum_symbol_by_value_msg_type_t(28) -> 'AUTH_REP';
enum_symbol_by_value_msg_type_t(29) -> 'OK_REP';
enum_symbol_by_value_msg_type_t(30) -> 'ERROR_REP';
enum_symbol_by_value_msg_type_t(31) -> 'OK2_REP';
enum_symbol_by_value_msg_type_t(32) -> 'ERROR2_REP';
enum_symbol_by_value_msg_type_t(65) -> 'REGISTER_FRONTEND_REQ';
enum_symbol_by_value_msg_type_t(66) -> 'REGISTER_FRONTEND_REP';
enum_symbol_by_value_msg_type_t(67) -> 'ADD_ROUTE_REQ';
enum_symbol_by_value_msg_type_t(68) -> 'ADD_ROUTE_REP';
enum_symbol_by_value_msg_type_t(69) -> 'DELETE_ROUTE_REQ';
enum_symbol_by_value_msg_type_t(70) -> 'DELETE_ROUTE_REP';
enum_symbol_by_value_msg_type_t(71) -> 'ADD_ROUTE_MSG';
enum_symbol_by_value_msg_type_t(72) -> 'DELETE_ROUTE_MSG';
enum_symbol_by_value_msg_type_t(73) -> 'PUSH_ROUTES_REQ';
enum_symbol_by_value_msg_type_t(74) -> 'PUSH_ROUTES_REP';
enum_symbol_by_value_msg_type_t(75) -> 'PULL_ROUTES_REQ';
enum_symbol_by_value_msg_type_t(76) -> 'PULL_ROUTES_REP';
enum_symbol_by_value_msg_type_t(81) -> 'REGISTER_BACKEND_REQ';
enum_symbol_by_value_msg_type_t(82) -> 'REGISTER_BACKEND_REP';
enum_symbol_by_value_msg_type_t(83) -> 'DELETE_TOPICS_REQ';
enum_symbol_by_value_msg_type_t(84) -> 'DELETE_TOPICS_REP';
enum_symbol_by_value_msg_type_t(97) -> 'RESOLVE_FRONTEND_REQ';
enum_symbol_by_value_msg_type_t(98) -> 'RESOLVE_FRONTEND_REP';
enum_symbol_by_value_msg_type_t(99) -> 'RESOLVE_BACKEND_REQ';
enum_symbol_by_value_msg_type_t(100) -> 'RESOLVE_BACKEND_REP';
enum_symbol_by_value_msg_type_t(105) -> 'WATCH_REQ';
enum_symbol_by_value_msg_type_t(106) -> 'WATCH_REP';
enum_symbol_by_value_msg_type_t(107) -> 'UNWATCH_REQ';
enum_symbol_by_value_msg_type_t(108) -> 'UNWATCH_REP';
enum_symbol_by_value_msg_type_t(121) -> 'RESOLVE_IP_REQ';
enum_symbol_by_value_msg_type_t(122) -> 'RESOLVE_IP_REP'.


enum_value_by_symbol_msg_type_t('UNKNOWN') -> 0;
enum_value_by_symbol_msg_type_t('PING_REQ') -> 1;
enum_value_by_symbol_msg_type_t('PING_REP') -> 2;
enum_value_by_symbol_msg_type_t('PULL_REQ') -> 3;
enum_value_by_symbol_msg_type_t('PULL_REP') -> 4;
enum_value_by_symbol_msg_type_t('PUSH_REQ') -> 5;
enum_value_by_symbol_msg_type_t('PUSH_REP') -> 6;
enum_value_by_symbol_msg_type_t('DO_REQ') -> 7;
enum_value_by_symbol_msg_type_t('DO_REP') -> 8;
enum_value_by_symbol_msg_type_t('DO2_REQ') -> 9;
enum_value_by_symbol_msg_type_t('DO2_REP') -> 10;
enum_value_by_symbol_msg_type_t('AUTH_REQ') -> 27;
enum_value_by_symbol_msg_type_t('AUTH_REP') -> 28;
enum_value_by_symbol_msg_type_t('OK_REP') -> 29;
enum_value_by_symbol_msg_type_t('ERROR_REP') -> 30;
enum_value_by_symbol_msg_type_t('OK2_REP') -> 31;
enum_value_by_symbol_msg_type_t('ERROR2_REP') -> 32;
enum_value_by_symbol_msg_type_t('REGISTER_FRONTEND_REQ') -> 65;
enum_value_by_symbol_msg_type_t('REGISTER_FRONTEND_REP') -> 66;
enum_value_by_symbol_msg_type_t('ADD_ROUTE_REQ') -> 67;
enum_value_by_symbol_msg_type_t('ADD_ROUTE_REP') -> 68;
enum_value_by_symbol_msg_type_t('DELETE_ROUTE_REQ') -> 69;
enum_value_by_symbol_msg_type_t('DELETE_ROUTE_REP') -> 70;
enum_value_by_symbol_msg_type_t('ADD_ROUTE_MSG') -> 71;
enum_value_by_symbol_msg_type_t('DELETE_ROUTE_MSG') -> 72;
enum_value_by_symbol_msg_type_t('PUSH_ROUTES_REQ') -> 73;
enum_value_by_symbol_msg_type_t('PUSH_ROUTES_REP') -> 74;
enum_value_by_symbol_msg_type_t('PULL_ROUTES_REQ') -> 75;
enum_value_by_symbol_msg_type_t('PULL_ROUTES_REP') -> 76;
enum_value_by_symbol_msg_type_t('REGISTER_BACKEND_REQ') -> 81;
enum_value_by_symbol_msg_type_t('REGISTER_BACKEND_REP') -> 82;
enum_value_by_symbol_msg_type_t('DELETE_TOPICS_REQ') -> 83;
enum_value_by_symbol_msg_type_t('DELETE_TOPICS_REP') -> 84;
enum_value_by_symbol_msg_type_t('RESOLVE_FRONTEND_REQ') -> 97;
enum_value_by_symbol_msg_type_t('RESOLVE_FRONTEND_REP') -> 98;
enum_value_by_symbol_msg_type_t('RESOLVE_BACKEND_REQ') -> 99;
enum_value_by_symbol_msg_type_t('RESOLVE_BACKEND_REP') -> 100;
enum_value_by_symbol_msg_type_t('WATCH_REQ') -> 105;
enum_value_by_symbol_msg_type_t('WATCH_REP') -> 106;
enum_value_by_symbol_msg_type_t('UNWATCH_REQ') -> 107;
enum_value_by_symbol_msg_type_t('UNWATCH_REP') -> 108;
enum_value_by_symbol_msg_type_t('RESOLVE_IP_REQ') -> 121;
enum_value_by_symbol_msg_type_t('RESOLVE_IP_REP') -> 122.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"maxwell.protocol.ping_req_t">>) -> ping_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.ping_rep_t">>) -> ping_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.pull_req_t">>) -> pull_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.pull_rep_t">>) -> pull_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.push_req_t">>) -> push_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.push_rep_t">>) -> push_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.do_req_t">>) -> do_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.do_rep_t">>) -> do_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.do2_req_t">>) -> do2_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.do2_rep_t">>) -> do2_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.auth_req_t">>) -> auth_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.auth_rep_t">>) -> auth_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.ok_rep_t">>) -> ok_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.error_rep_t">>) -> error_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.ok2_rep_t">>) -> ok2_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.error2_rep_t">>) -> error2_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.watch_req_t">>) -> watch_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.watch_rep_t">>) -> watch_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.unwatch_req_t">>) -> unwatch_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.unwatch_rep_t">>) -> unwatch_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.register_frontend_req_t">>) -> register_frontend_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.register_frontend_rep_t">>) -> register_frontend_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.add_route_req_t">>) -> add_route_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.add_route_rep_t">>) -> add_route_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.delete_route_req_t">>) -> delete_route_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.delete_route_rep_t">>) -> delete_route_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.add_route_msg_t">>) -> add_route_msg_t;
fqbin_to_msg_name(<<"maxwell.protocol.delete_route_msg_t">>) -> delete_route_msg_t;
fqbin_to_msg_name(<<"maxwell.protocol.push_routes_req_t">>) -> push_routes_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.push_routes_rep_t">>) -> push_routes_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.pull_routes_req_t">>) -> pull_routes_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.pull_routes_rep_t">>) -> pull_routes_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.delete_topics_req_t">>) -> delete_topics_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.delete_topics_rep_t">>) -> delete_topics_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.register_backend_req_t">>) -> register_backend_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.register_backend_rep_t">>) -> register_backend_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.resolve_frontend_req_t">>) -> resolve_frontend_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.resolve_frontend_rep_t">>) -> resolve_frontend_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.resolve_backend_req_t">>) -> resolve_backend_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.resolve_backend_rep_t">>) -> resolve_backend_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.resolve_ip_req_t">>) -> resolve_ip_req_t;
fqbin_to_msg_name(<<"maxwell.protocol.resolve_ip_rep_t">>) -> resolve_ip_rep_t;
fqbin_to_msg_name(<<"maxwell.protocol.msg_t">>) -> msg_t;
fqbin_to_msg_name(<<"maxwell.protocol.source_t">>) -> source_t;
fqbin_to_msg_name(<<"maxwell.protocol.trace_t">>) -> trace_t;
fqbin_to_msg_name(<<"maxwell.protocol.route_group_t">>) -> route_group_t;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(ping_req_t) -> <<"maxwell.protocol.ping_req_t">>;
msg_name_to_fqbin(ping_rep_t) -> <<"maxwell.protocol.ping_rep_t">>;
msg_name_to_fqbin(pull_req_t) -> <<"maxwell.protocol.pull_req_t">>;
msg_name_to_fqbin(pull_rep_t) -> <<"maxwell.protocol.pull_rep_t">>;
msg_name_to_fqbin(push_req_t) -> <<"maxwell.protocol.push_req_t">>;
msg_name_to_fqbin(push_rep_t) -> <<"maxwell.protocol.push_rep_t">>;
msg_name_to_fqbin(do_req_t) -> <<"maxwell.protocol.do_req_t">>;
msg_name_to_fqbin(do_rep_t) -> <<"maxwell.protocol.do_rep_t">>;
msg_name_to_fqbin(do2_req_t) -> <<"maxwell.protocol.do2_req_t">>;
msg_name_to_fqbin(do2_rep_t) -> <<"maxwell.protocol.do2_rep_t">>;
msg_name_to_fqbin(auth_req_t) -> <<"maxwell.protocol.auth_req_t">>;
msg_name_to_fqbin(auth_rep_t) -> <<"maxwell.protocol.auth_rep_t">>;
msg_name_to_fqbin(ok_rep_t) -> <<"maxwell.protocol.ok_rep_t">>;
msg_name_to_fqbin(error_rep_t) -> <<"maxwell.protocol.error_rep_t">>;
msg_name_to_fqbin(ok2_rep_t) -> <<"maxwell.protocol.ok2_rep_t">>;
msg_name_to_fqbin(error2_rep_t) -> <<"maxwell.protocol.error2_rep_t">>;
msg_name_to_fqbin(watch_req_t) -> <<"maxwell.protocol.watch_req_t">>;
msg_name_to_fqbin(watch_rep_t) -> <<"maxwell.protocol.watch_rep_t">>;
msg_name_to_fqbin(unwatch_req_t) -> <<"maxwell.protocol.unwatch_req_t">>;
msg_name_to_fqbin(unwatch_rep_t) -> <<"maxwell.protocol.unwatch_rep_t">>;
msg_name_to_fqbin(register_frontend_req_t) -> <<"maxwell.protocol.register_frontend_req_t">>;
msg_name_to_fqbin(register_frontend_rep_t) -> <<"maxwell.protocol.register_frontend_rep_t">>;
msg_name_to_fqbin(add_route_req_t) -> <<"maxwell.protocol.add_route_req_t">>;
msg_name_to_fqbin(add_route_rep_t) -> <<"maxwell.protocol.add_route_rep_t">>;
msg_name_to_fqbin(delete_route_req_t) -> <<"maxwell.protocol.delete_route_req_t">>;
msg_name_to_fqbin(delete_route_rep_t) -> <<"maxwell.protocol.delete_route_rep_t">>;
msg_name_to_fqbin(add_route_msg_t) -> <<"maxwell.protocol.add_route_msg_t">>;
msg_name_to_fqbin(delete_route_msg_t) -> <<"maxwell.protocol.delete_route_msg_t">>;
msg_name_to_fqbin(push_routes_req_t) -> <<"maxwell.protocol.push_routes_req_t">>;
msg_name_to_fqbin(push_routes_rep_t) -> <<"maxwell.protocol.push_routes_rep_t">>;
msg_name_to_fqbin(pull_routes_req_t) -> <<"maxwell.protocol.pull_routes_req_t">>;
msg_name_to_fqbin(pull_routes_rep_t) -> <<"maxwell.protocol.pull_routes_rep_t">>;
msg_name_to_fqbin(delete_topics_req_t) -> <<"maxwell.protocol.delete_topics_req_t">>;
msg_name_to_fqbin(delete_topics_rep_t) -> <<"maxwell.protocol.delete_topics_rep_t">>;
msg_name_to_fqbin(register_backend_req_t) -> <<"maxwell.protocol.register_backend_req_t">>;
msg_name_to_fqbin(register_backend_rep_t) -> <<"maxwell.protocol.register_backend_rep_t">>;
msg_name_to_fqbin(resolve_frontend_req_t) -> <<"maxwell.protocol.resolve_frontend_req_t">>;
msg_name_to_fqbin(resolve_frontend_rep_t) -> <<"maxwell.protocol.resolve_frontend_rep_t">>;
msg_name_to_fqbin(resolve_backend_req_t) -> <<"maxwell.protocol.resolve_backend_req_t">>;
msg_name_to_fqbin(resolve_backend_rep_t) -> <<"maxwell.protocol.resolve_backend_rep_t">>;
msg_name_to_fqbin(resolve_ip_req_t) -> <<"maxwell.protocol.resolve_ip_req_t">>;
msg_name_to_fqbin(resolve_ip_rep_t) -> <<"maxwell.protocol.resolve_ip_rep_t">>;
msg_name_to_fqbin(msg_t) -> <<"maxwell.protocol.msg_t">>;
msg_name_to_fqbin(source_t) -> <<"maxwell.protocol.source_t">>;
msg_name_to_fqbin(trace_t) -> <<"maxwell.protocol.trace_t">>;
msg_name_to_fqbin(route_group_t) -> <<"maxwell.protocol.route_group_t">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"maxwell.protocol.msg_type_t">>) -> msg_type_t;
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin(msg_type_t) -> <<"maxwell.protocol.msg_type_t">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'maxwell.protocol'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "maxwell_protocol.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["maxwell_protocol.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["maxwell_protocol"].


get_msg_containment("maxwell_protocol") ->
    [add_route_msg_t,
     add_route_rep_t,
     add_route_req_t,
     auth_rep_t,
     auth_req_t,
     delete_route_msg_t,
     delete_route_rep_t,
     delete_route_req_t,
     delete_topics_rep_t,
     delete_topics_req_t,
     do2_rep_t,
     do2_req_t,
     do_rep_t,
     do_req_t,
     error2_rep_t,
     error_rep_t,
     msg_t,
     ok2_rep_t,
     ok_rep_t,
     ping_rep_t,
     ping_req_t,
     pull_rep_t,
     pull_req_t,
     pull_routes_rep_t,
     pull_routes_req_t,
     push_rep_t,
     push_req_t,
     push_routes_rep_t,
     push_routes_req_t,
     register_backend_rep_t,
     register_backend_req_t,
     register_frontend_rep_t,
     register_frontend_req_t,
     resolve_backend_rep_t,
     resolve_backend_req_t,
     resolve_frontend_rep_t,
     resolve_frontend_req_t,
     resolve_ip_rep_t,
     resolve_ip_req_t,
     route_group_t,
     source_t,
     trace_t,
     unwatch_rep_t,
     unwatch_req_t,
     watch_rep_t,
     watch_req_t];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("maxwell_protocol") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("maxwell_protocol") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("maxwell_protocol") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("maxwell_protocol") -> [msg_type_t];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.watch_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.watch_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.unwatch_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.unwatch_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.trace_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.source_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.route_group_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.resolve_ip_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.resolve_ip_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.resolve_frontend_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.resolve_frontend_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.resolve_backend_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.resolve_backend_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.register_frontend_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.register_frontend_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.register_backend_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.register_backend_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.push_routes_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.push_routes_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.push_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.push_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.pull_routes_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.pull_routes_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.pull_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.pull_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.ping_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.ping_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.ok_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.ok2_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.msg_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.error_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.error2_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.do_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.do_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.do2_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.do2_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.delete_topics_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.delete_topics_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.delete_route_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.delete_route_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.delete_route_msg_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.auth_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.auth_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.add_route_req_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.add_route_rep_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(<<"maxwell.protocol.add_route_msg_t">>) -> "maxwell_protocol";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"maxwell.protocol.msg_type_t">>) -> "maxwell_protocol";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.17.7".

gpb_version_as_list() ->
    [4,17,7].

gpb_version_source() ->
    "file".
